#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

# Builtin function for handing class imbalance using Adaptive Synthetic Sampling (ADASYN)
# by Haibo He et. al. In International Joint Conference on Neural Networks (2008). 1322-1328
#
# INPUT:
# --------------------------------------------------------------------------------------
# X        Feature matrix with m samples (m = ms + ml)
# Y        Labels (two-class classification)
# k        Number of nearest neighbors
# beta     Desired balance level after generation of synthetic data [0, 1]
# dth      Threshold for the maximum tolerated degree of class imbalance ratio (0, 1]
# --------------------------------------------------------------------------------------
#
# OUTPUT:
# -------------------------------------------------------------------------------------
# Z     Matrix of G synthetic minority class samples, with G = (ml-ms)*beta
# -------------------------------------------------------------------------------------

m_adasyn = function(Matrix[Double] X, Matrix[Integer] Y, Integer k = 1, Double beta = 0.8, Double dth = 0.7)
return (Matrix[Double] Z) {

    if(k < 1) {
        print("k should not be less than 1. Setting k value to default k = 1.")
        k = 1
    }

    # Compute the number of minority class examples ms and and majority class examples ml
    firstLabel = Y[1]
    secondLabel = getSecondLabel(Y, firstLabel)

    if(firstLabel == secondLabel){
        stop(Data set contains only a single class. adasyn() targets only binary classification.)
    }

    numFirst = aggregate(Y, Y == firstLabel, "count")
    numSecond = nrow(Y) - numFirst

    if(numFirst > numSecond) {
        ml = numFirst
        ms = numSecond
        majority = firstLabel
        minority = secondLabel
    } else {
        ml = numSecond
        ms = numFirst
        majority = secondLabel
        minority = secondLabel
    }

    # (1) Calculate the degree of class imbalance, where d âˆˆ (0, 1]
    d = ms/ml

    # (2) Check if d is smaller than dth and proceed only in that case
    if(d >= dth){
        stop(The degree of class imbalance exceeds the preset threshold dth. Increase the threshold.)
    }

    # (2b) Calculate the number of synthetic data examples to be generated for the minority class
    G = (ml - ms)/beta

    # (2c) For each data point in the minority class, compute the k-nearest neighbors.
    #      Then, compute the ratio of the neighbors belonging to the majority class.

    


}

getSecondLabel = function(Matrix[Y] Integer, Integer firstLabel)
return (Integer secondLabel) {

    flag = FALSE
    i = 1
    while(!flag && i <= nrow(Y)){
        if(Y[i] != firstLabel){
            label2 = Y[i]
            flag = TRUE
        }
        i = i + 1
    }
}
