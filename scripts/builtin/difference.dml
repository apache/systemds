#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

# Builtin function that implements difference operation on vectors

# INPUT PARAMETERS:
# ---------------------------------------------------------------------------------------------
# NAME            TYPE    DEFAULT     MEANING
# ---------------------------------------------------------------------------------------------
# X               Matrix  ---         input vector
# ---------------------------------------------------------------------------------------------
# Y               Matrix  ---         input vector
# ---------------------------------------------------------------------------------------------

# Output(s)
# ---------------------------------------------------------------------------------------------
# NAME            TYPE    DEFAULT      MEANING
# ---------------------------------------------------------------------------------------------
# R               Matrix  ---         vector with all elements that are present in X but not in Y


difference = function(Matrix[Double] X, Matrix[Double] Y)
    return (matrix[double] R)
{
    if(nrow(X) == 0)
    {
        R = Y;
    }
    else if(nrow(Y) == 0)
    {
        R = X;
    }
    else
    {
        min_value = min(min(X), min(Y)) - 1;
        if(min_value < 0)
        {
                X = X - min_value;
                Y = Y - min_value;
        }

        X_t = (table(X, 1) != 0)
        Y_t = (table(Y, 1) != 0)

        rows_X = nrow(X_t);
        rows_Y = nrow(Y_t);

        max_x_val = max(X);
        Y_new = rbind(Y, matrix(max_x_val + 1, rows=1,cols=1));
        Y_new_t = (table(Y_new, 1) != 0)

        A = X_t[1:rows_X,] - Y_new_t[1:rows_X,]
        B = X_t[1:rows_X,] * A[1:rows_X,];
        R = removeEmpty(target=seq(1,nrow(B)), margin="rows", select=B);
        if(min_value < 0)
        {
            R = R + min_value;
        }
    }
}
