#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

s_fixInvalidLengths = function(Frame[Unknown] F1, Double ql = 0.05, Double qu = 0.99)
return (Frame[Unknown] out, Matrix[Double] M)
{

  length = map(F1, "x -> x.length()")
  length = as.matrix(length)
  M = getInvalidsMask(length, ql, qu)
  # # # check if mask vector has 1 in more than one column
  # # # this indicates that two values are being swapped and can be fixed
  rowCount = rowSums(M) > 1
  if(sum(rowCount) > 0)
  {
    countTotalSwaps = sum(rowCount)
    # # get the row index for swapping
    rowIds = rowCount * seq(1, nrow(rowCount))
    rowIds = removeEmpty(target=rowIds, margin="rows")
    colIds = M * t(seq(1, ncol(M)))
    for(i in 1:countTotalSwaps)
    {
      rowIdx = as.scalar(rowIds[i, 1])
      colIdx = removeEmpty(target = colIds[rowIdx], margin="cols")
      id1 = as.scalar(colIdx[1, 1])
      id2 = as.scalar(colIdx[1, 2])
      tmp = F1[rowIdx, id1]
      F1[rowIdx, id1] = F1[rowIdx, id2]
      F1[rowIdx, id2] = tmp
      # # remove the mask for fixed entries
      M[rowIdx, id1] = 0
      M[rowIdx, id2] = 0
    }
  }
  M = replace(target = M, pattern = 1, replacement = NaN)
  out = F1
}

getInvalidsMask = function(Matrix[Double] X, Double ql = 0.05, Double qu = 0.99) 
return (Matrix[Double] Y) {

  Y = matrix(0, nrow(X), ncol(X))
  parfor(i in 1:ncol(X), check=0) {
    q1 = quantile(X[,i], ql)
    q2 = quantile(X[,i], qu)
    Y[, i] = ( X[, i] < q1  | X[, i] > q2)
  }
}
