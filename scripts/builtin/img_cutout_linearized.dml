#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

# Image Cutout function replaces a rectangular section of an image with a constant value.
#
# INPUT:
# ---------------------------------------------------------------------------------------------
# img         Input images as linearized 2D matrix with top left corner at [1, 1]
# x           Column index of the top left corner of the rectangle (starting at 1)
# y           Row index of the top left corner of the rectangle (starting at 1)
# w           Width of the rectangle (must be positive)
# h      Height of the rectangle (must be positive)
# value       The value to set for the rectangle
# sW          Width of a single image
# sH          Height of a single image
# ---------------------------------------------------------------------------------------------
#
# OUTPUT:
# ------------------------------------------------------------------------------------------
# img_out     Output images as linearized 2D matrix with top left corner at [1, 1]
# ------------------------------------------------------------------------------------------

m_img_cutout_linearized = function(Matrix[Double] img, Integer x, Integer y, Integer w, Integer h,
  Double value, Integer sW, Integer sH) return (Matrix[Double] img_out) {
  rows = nrow(img)
  cols = ncol(img)

  if (w < 1 | h < 1) {
    print("Invalid w or h. Returning input")
    img_out = img
  } else {

    start_x = max(1, x)
    start_y = max(1, y)

    end_x = start_x + w - 1
    end_x = min(sW, end_x)

    end_y = start_y + h - 1
    end_y = min(sH, end_y)

    img_out = img

    # Iterate through each row of the rectangular region
    for (i in start_y: end_y){
      start_idx = (i-1) * sW + start_x
      end_idx = (i-1) * sW + end_x

      img_out[, start_idx:end_idx] = matrix(value, rows=rows, cols=(end_x-start_x+1))
    }
  }
}
