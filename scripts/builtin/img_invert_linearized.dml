#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

# This is an image data augmentation function. It inverts an image.It can handle one or multiple images 
#
# .. code-block:: python
#
#   >>> import numpy as np
#   >>> from systemds.context import SystemDSContext
#   >>> from systemds.operator.algorithm import img_invert_linearized
#   >>> 
#   >>> with SystemDSContext() as sds:
#   ...     img = sds.from_numpy(
#   ...         np.array([[ 10., 20., 30.,
#   ...                     40., 50., 60.,
#   ...                     70., 80., 90. ]], dtype=np.float32)
#   ...     )
#   ...     result_img = img_invert_linearized(img, 200.).compute()
#   ...     print(result_img.reshape(3, 3))
#   [[190. 180. 170.]
#    [160. 150. 140.]
#    [130. 120. 110.]]
#
#
# INPUT:
# ---------------------------------------------------------------------------------------------
# img_in     Input images as linearized 2D matrix with top left corner at [1, 1] (every row represents a linearized matrix/image)
# max_value  The maximum value pixels can have
# ---------------------------------------------------------------------------------------------
#
# OUTPUT:
# -------------------------------------------------------------------------------------------
# img_out  Output images (every row of the matrix represents a linearized image)
# -------------------------------------------------------------------------------------------

m_img_invert_linearized = function(Matrix[Double] img_in, Double max_value) return (Matrix[Double] img_out) {
  img_out = img_invert(img_in,max_value)
}
