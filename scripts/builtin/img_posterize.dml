#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

# The Image Posterize function limits pixel values to 2^bits different values in the range [0, 255].
# Assumes the input image can attain values in the range [0, 255].
#
# .. code-block:: python
#
#   >>> import numpy as np
#   >>> from systemds.context import SystemDSContext
#   >>> from systemds.operator.algorithm import img_posterize
#   >>> 
#   >>> with SystemDSContext() as sds:
#   ...     img = sds.from_numpy(
#   ...         np.array([[ 10., 20., 30.],
#   ...                   [ 40., 255., 60.],
#   ...                   [ 70., 80., 90.]], dtype=np.float32)
#   ...     )
#   ...     result_img = img_posterize(img, 1).compute()
#   ...     print(result_img)
#   [[  0.   0.   0.]
#    [  0. 128.   0.]
#    [  0.   0.   0.]]
#
#
# INPUT:
# -------------------------------------------------------------------------------------------
# img_in  Input image as 2D matrix with top left corner at [1, 1]
# bits    The number of bits to keep for the values.
#         1 means black and white, 8 means every integer between 0 and 255.
# -------------------------------------------------------------------------------------------
#
# OUTPUT:
# ---------------------------------------------------------------------------------------------
# img_out  Output image
# ---------------------------------------------------------------------------------------------

m_img_posterize = function(Matrix[Double] img_in, Integer bits) return (Matrix[Double] img_out) {
  img_out = (img_in %/% 2^(8 - bits)) * (2^(8 - bits))
}
