#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

# The image sample pairing function blends two images together.
#
# .. code-block:: python
#
#   >>> import numpy as np
#   >>> from systemds.context import SystemDSContext
#   >>> from systemds.operator.algorithm import img_sample_pairing_linearized
#   >>> 
#   >>> with SystemDSContext() as sds:
#   ...     img_in1 = sds.from_numpy(
#   ...         np.array([[ 10., 20., 30.,
#   ...                     40., 50., 60.,
#   ...                     70., 80., 90. ]], dtype=np.float32)
#   ...     )
#   ...     img_in2 = sds.from_numpy(
#   ...         np.array([[ 30., 40., 50.,
#   ...                     60., 70., 80.,
#   ...                     90., 100., 110. ]], dtype=np.float32)
#   ...     )
#   ...     result_img = img_sample_pairing_linearized(img_in1, img_in2, 0.5).compute()
#   ...     print(result_img.reshape(3, 3))
#   [[ 20.  30.  40.]
#    [ 50.  60.  70.]
#    [ 80.  90. 100.]]
#
#
# INPUT:
# -------------------------------------------------------------------------------------------
# img_in1  Input images as linearized 2D matrix with top left corner at [1, 1] (every row represents a linearized matrix/image)
# img_in2  Second input image (one image represented as a single row linearized matrix)
# weight   The weight given to the second image.
#          0 means only img_in1, 1 means only img_in2 will be visible
# -------------------------------------------------------------------------------------------
#
# OUTPUT:
# --------------------------------------------------------------------------------------------
# img_out  Output image
# --------------------------------------------------------------------------------------------

m_img_sample_pairing_linearized= function(Matrix[Double] img_in1, Matrix[Double] img_in2, Double weight) return (Matrix[Double] img_out) {
  if (weight < 0 | 1 < weight) {
    print("Invalid weight. Set weight to 0.5")
    weight = 0.5
  }
  num_images= nrow(img_in1)
  img_out = matrix (0 ,rows=nrow(img_in1),cols=ncol(img_in2))
  parfor(i in 1:num_images) {
    img_out[i,] = (1 - weight) * img_in1[i,]+ weight * img_in2
  }
 
}
