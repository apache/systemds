#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

# The lmPredict-function predicts the class of a feature vector
#
# INPUT:
# --------------------------------------------------------------------------------------
# X        Matrix of feature vectors
# B        1-column matrix of weights.
# ytest    test labels, used only for verbose output. can be set to matrix(0,1,1)
#          if verbose output is not wanted
# icpt     Intercept presence, shifting and rescaling the columns of X
# verbose  If TRUE print messages are activated
# --------------------------------------------------------------------------------------
#
# OUTPUT:
# -----------------------------------------------------------------------------------
# yhat  1-column matrix of classes
# -----------------------------------------------------------------------------------

m_lmPredict = function(Matrix[Double] X, Matrix[Double] B, 
  Matrix[Double] ytest = matrix(0,1,1), Integer icpt = 0, Boolean verbose = FALSE) 
  return (Matrix[Double] yhat)
{
  intercept = ifelse(icpt>0 | ncol(X)+1==nrow(B), as.scalar(B[nrow(B),]), 0);
  yhat = X %*% B[1:ncol(X),] + intercept;

  if( verbose ) {
    y_residual = ytest - yhat;
    avg_res = sum(y_residual) / nrow(ytest);
    ss_res = sum(y_residual^2);
    ss_avg_res = ss_res - nrow(ytest) * avg_res^2;
    R2 = 1 - ss_res / (sum(ytest^2) - nrow(ytest) * (sum(ytest)/nrow(ytest))^2);
    print("\nAccuracy:" +
          "\n--sum(ytest) = " + sum(ytest) +
          "\n--sum(yhat) = " + sum(yhat) +
          "\n--AVG_RES_Y: " + avg_res +
          "\n--SS_AVG_RES_Y: " + ss_avg_res +
          "\n--R2: " + R2 );
  }
}
