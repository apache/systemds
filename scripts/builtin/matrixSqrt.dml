#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

matrixSqrt = function(
    Matrix[Double] X
)return(
    Matrix[Double] sqrt_x
){
    N = nrow(X);
    D = ncol(X);

    #check that matrix is square
    if (D != N){
        stop("matrixSqrt Input Error: matrix not square!")
    }

    # Any non singualar square matrix has a square root
    isDiag = isDiagonal(X)
    if(isDiag) {
        sqrt_x = sqrtDiagMatrix(X);
    } else {
        [eValues, eVectors] = eigen(X);

        hasNonNegativeEigenValues = TRUE
        l = length(eValues)
        for (i in 1:l){
            gtZero = as.scalar(eValues[i]) >= 0.0;
            hasNonNegativeEigenValues = gtZero & hasNonNegativeEigenValues;
        }

        if(!hasNonNegativeEigenValues) {
            stop("matrixSqrt exec Error: matrix has imaginary square root");
        }

        X_t = t(X);
        isSymmetric = TRUE;

        for (i in 1:N) {
            for (j in 1:D) {
                same = as.scalar(X[i, j]) == as.scalar(X_t[i, j]);
                isSymmetric = isSymmetric & same;
            }
        }

        allEigenValuesUnique = length(eValues) == length(unique(eValues));

        if(allEigenValuesUnique | isSymmetric) {
            # calculate X = VDV^(-1) -> S = sqrt(D) -> sqrt_x = VSV^(-1)
            sqrtD = sqrtDiagMatrix(diag(eValues));
            V_Inv = inv(eVectors);
            sqrt_x = eVectors %*% sqrtD %*% V_Inv;
        } else {
            #formular: (Denmanâ€“Beavers iteration)
            Y = X
            #identity matrix
            Z = diag(matrix(1.0, rows=N, cols=1))

            for (x in 1:100) {
                Y_new = (1 / 2) * (Y + inv(Z))
                Z_new = (1 / 2) * (Z + inv(Y))
                Y = Y_new
                Z = Z_new
            }
            sqrt_x = Y
        }
    }
}

# assumes square and diagonal matrix
sqrtDiagMatrix = function(
        Matrix[Double] X
)return(
        Matrix[Double] sqrt_x
){
    N = nrow(X);

    #check if identity matrix
    is_identity = TRUE;
    for (i in 1:N) {
        is_idElement = as.scalar(X[i, i]) == 1.0;
        is_identity = is_identity & is_idElement;
    }

    if(is_identity) {
        sqrt_x = X;
    } else {
        sqrt_x = matrix(0, rows=N, cols=N);
        tmp = 0
        for (i in 1:N) {
            #workaround needed to access variable for it to be initialized
            tmp = tmp + i
            value = X[i, i];
            sqrt_x[i, i] = sqrt(value);
        }
    }
}

isDiagonal = function (
    Matrix[Double] X
)return(
    boolean diagonal
){
    N = nrow(X);
    D = ncol(X);
    noCells = N * D;

    diag = diag(diag(X));
    compare = X == diag;
    sameCells = sum(compare);

    #all cells should be the same to be diagonal
    diagonal = noCells == sameCells;
}