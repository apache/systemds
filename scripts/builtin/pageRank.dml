#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

# DML builtin method for PageRank algorithm
#
# INPUT:
# ------------------------------------------------------------------------------
# G           Input Matrix
# p           initial page rank vector (number of nodes) - if unspecified initialized by constant value
# e           do not expose this parameter - e is an all-ones vector, generated inside the function (before the loop)
# u           personalization vector (number of nodes)
# alpha       teleport probability
# max_iter    maximum number of iterations
# ------------------------------------------------------------------------------
#
# OUTPUT:
# ---------------------------------------------------------------------------
# pprime      computed pagerank
# ---------------------------------------------------------------------------

m_pageRank = function (Matrix[Double] G, Matrix[Double] p,
  Matrix[Double] e, Matrix[Double] u,
  Double alpha = 0.85, Integer max_iter = 6)
  return (Matrix[double] pprime)
{
  i = 0;
  while( i < max_iter ) {
    p = alpha * (G %*% p) + (1 - alpha) * (e %*% u %*% p);
    i += 1;
  }
  pprime = p
}