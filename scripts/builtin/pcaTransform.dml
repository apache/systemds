#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

# Principal Component Analysis (PCA) for dimensionality reduction prediction
# This method is used to transpose data, which the PCA model was not trained on. To validate how good
# The PCA is, and to apply in production. 
#
# INPUT:
# ------------------------------------------------------------------------------------
# X            Input feature matrix
# Clusters     The previously computed principal components
# Centering    The column means of the PCA model, subtracted to construct the PCA
# ScaleFactor  The scaling of each dimension in the PCA model
# ------------------------------------------------------------------------------------
#
# OUTPUT:
# --------------------------------------------------------------------------------------------
# Y     Output feature matrix dimensionally reduced by PCA
# --------------------------------------------------------------------------------------------

m_pcaTransform = function(Matrix[Double] X, Matrix[Double] Clusters,
  Matrix[Double] Centering = matrix(0, rows= 0, cols=0), 
  Matrix[Double] ScaleFactor = matrix(0, rows= 0, cols=0))
  return (Matrix[Double] Y) 
{

  X = scaleApply(X, Centering, ScaleFactor)

  Y = X %*% Clusters
}
