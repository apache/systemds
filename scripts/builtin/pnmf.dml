#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

# The pnmf-function implements Poisson Non-negative Matrix Factorization (PNMF). Matrix X is factorized into two
# non-negative matrices, W and H based on Poisson probabilistic assumption. This non-negativity makes the resulting
# matrices easier to inspect.
#
# [Chao Liu, Hung-chih Yang, Jinliang Fan, Li-Wei He, Yi-Min Wang:
# Distributed nonnegative matrix factorization for web-scale dyadic 
# data analysis on mapreduce. WWW 2010: 681-690]
#
# INPUT:
# ----------------------------------------------------------------------------------------
# X        Matrix of feature vectors.
# rnk      Number of components into which matrix X is to be factored.
# eps      Tolerance
# maxi     Maximum number of conjugate gradient iterations.
# verbose  If TRUE, 'iter' and 'obj' are printed.
# ----------------------------------------------------------------------------------------
#
# OUTPUT:
# ------------------------------------------------------------------------------------
# W     List of pattern matrices, one for each repetition.
# H     List of amplitude matrices, one for each repetition.
# ------------------------------------------------------------------------------------

m_pnmf = function(Matrix[Double] X, Integer rnk, Double eps = 1e-8, Integer maxi = 10, Boolean verbose=TRUE) 
  return (Matrix[Double] W, Matrix[Double] H) 
{
  #initialize W and H
  W = rand(rows=nrow(X), cols=rnk, min=0, max=0.025);
  H = rand(rows=rnk, cols=ncol(X), min=0, max=0.025);

  i = 0;
  while(i < maxi) {
    H = (H*(t(W)%*%(X/(W%*%H+eps)))) / t(colSums(W));
    W = (W*((X/(W%*%H+eps))%*%t(H))) / t(rowSums(H));
    i = i + 1;
    if( verbose ) {
      obj = sum(W%*%H) - sum(X*log(W%*%H+eps));
      print("iter=" + i + " obj=" + obj);
    }
  }
}
