#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

# Builtin function that implements product quantization
#
# INPUT:
# ---------------------------------------------------------------------------------------
# X                             The input Matrix to perform product quantization on
# M                             Size of the subvectors
# k                             Size of the subcodebooks
# runs                          Number of runs (with different initial centroids)
# max_iter                      Maximum number of iterations per run
# eps                           Tolerance (epsilon) for WCSS change ratio
# avg_sample_size_per_centroid  Average number of records per centroid in data samples
# separate                      Quantize subvectors separately
# seed                          The seed used for initial sampling. If set to -1
#                               random seeds are selected.
# ---------------------------------------------------------------------------------------
#
# OUTPUT:
# ---------------------------------------------------------------------------------------
# codebook  The matrix containing the centroids. If quantized separately, the ith
#           subcodebook is the ith chunk of size k.
# codes     The mapping of vectors to centroids.
# ---------------------------------------------------------------------------------------

m_quantizeByCluster = function(Matrix[Double]X, Integer M = 4, Integer k = 10, Integer runs = 10,
    Integer max_iter = 1000, Double eps = 1e-6, Integer avg_sample_size_per_centroid = 50, Integer separate=TRUE, Integer seed = -1)
  return(Matrix[Double] codebook, Matrix[Double] codes)
{
num_chunks = ncol(X) / M
#quantize subvectors together
if(!separate) {
  A = matrix(X, rows= nrow(X) * num_chunks, cols=M)
  [codebook, B] = kmeans(A, k * num_chunks, runs, max_iter, eps, FALSE, avg_sample_size_per_centroid, seed)
  codes = matrix(B, rows = nrow(B) / num_chunks, cols = ncol(B) * num_chunks)
}
#quantize subvectors separately
else {
  l = k
  codebook = matrix(1, rows=l*num_chunks, cols=M)
  codes = matrix(1, rows=nrow(X), cols=num_chunks)
  parfor(i in 1:num_chunks, check=0) {
     [tmp_cbook, tmp_c] = kmeans(X[,(i-1)*M+1:i*M], l, runs, max_iter, eps, FALSE, avg_sample_size_per_centroid, seed)
     codebook[(i-1)*l+1:i*l,] = tmp_cbook
     offset = matrix((i-1)*l, rows=nrow(codes), cols=1)
     codes[,i] = tmp_c + offset
  }
 }
}
