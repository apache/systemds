#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

# This raJoin-function takes two matrix datasets as input from where it performs
# relational operations : join
#
# INPUT:
# ------------------------------------------------------------------------------
# A         Matrix of left input data [shape: N x M]
# colA      Integer indicating the column index of matrix A to execute inner join command
# B         Matrix of right left data [shape: N x M]
# colA      Integer indicating the column index of matrix B to execute inner join command
# method    Join implementation method (nested-loop)
# ------------------------------------------------------------------------------
#
# OUTPUT:
# ------------------------------------------------------------------------------
# Y         Matrix of joined data [shape N' x M] with N' <= N
# ------------------------------------------------------------------------------

m_raJoin = function (Matrix[Double] A, Integer colA, Matrix[Double] B,
  Integer colB, String method="nested-loop")
  return (Matrix[Double] Y)
{
  # matrix of result data
  Y = matrix(0, rows=0, cols=ncol(A) + ncol(B) )

  for (i in 1:nrow(A)) {
    for (j in 1:nrow(B)) {
      if (as.scalar(A[i, colA] == B[j, colB])) {
        # Combine the matching row from A and B to match
        match = cbind(A[i,], B[j,])
        # merge the match row into result Y
        Y = rbind(Y, match)
      }
    }
  }
}

