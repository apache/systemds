#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

# This raSelection-function takes a matrix data set as input from where it performs
# relational operations : selection
#
# INPUT:
# ------------------------------------------------------------------------------
# X         Matrix of input data [shape: N x M]
# col       Integer indicating the column index to execute selection command
# op        String specifying the comparison operator (e.g., ">", "<", "==").
# val       Constant value to compare the column values "with col op val"
# ------------------------------------------------------------------------------
#
# OUTPUT:
# ------------------------------------------------------------------------------
# Y         Matrix of selected data [shape N' x M] with N' <= N
# ------------------------------------------------------------------------------

m_raSelection = function (Matrix[Double] X, Integer col, String op, Double val)
  return (Matrix[Double] Y)
{
  # Dertimine the operators
  I = ifelse(op == "==", X[,col] == val,
        ifelse(op == "!=", X[,col] != val,
        ifelse(op == "<",  X[,col] <  val,
        ifelse(op == ">",  X[,col] >  val,
        ifelse(op == "<=", X[,col] <= val,
        X[,col] >= val)))))

  # Perform actual selection
  Y = removeEmpty(target=X, margin="rows", select=I);
}

