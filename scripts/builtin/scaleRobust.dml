m_scaleRobust = function(Matrix[Double] X)
  return (Matrix[Double] Y, Matrix[Double] med, Matrix[Double] iqr)
{
  n = nrow(X)
  m = ncol(X)

  med = matrix(0.0, rows=1, cols=m)
  q1  = matrix(0.0, rows=1, cols=m)
  q3  = matrix(0.0, rows=1, cols=m)

  # Loop over columns to compute quantiles
  for (j in 1:m) {
    col_j = X[,j]                        # get column vector
    med[1,j] = quantile(col_j, 0.5)
    q1[1,j]  = quantile(col_j, 0.25)
    q3[1,j]  = quantile(col_j, 0.75)
  }

  iqr = q3 - q1

  # Prevent division by 0 or NaN
  iqr = replace(target=iqr, pattern=0, replacement=1)
  iqr = replace(target=iqr, pattern=NaN, replacement=1)

  # Robust scale
  Y = (X - med) / iqr
}
