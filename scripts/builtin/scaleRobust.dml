# Robust scaling using median and IQR (Interquartile Range)
# Resistant to outliers by centering with the median and scaling with IQR.
#
# INPUT:
#   X   Input feature matrix of shape n-by-m
#
# OUTPUT:
#   Y   Scaled output matrix of shape n-by-m
#   med Column medians (Q2) of shape 1-by-m
#   iqr Column interquartile ranges (Q3 - Q1) of shape 1-by-m

m_scaleRobust = function(Matrix[Double] X)
  return (Matrix[Double] Y, Matrix[Double] med, Matrix[Double] iqr)
{
  
  
  # Column-wise medians and quartiles
  med = quantile(X, as.matrix(0.5), 2)           # 1×m: median (Q2)
  q1  = quantile(X, as.matrix(0.25), 2)           # 1×m: first quartile
  q3  = quantile(X, as.matrix(0.75), 2)           # 1×m: third quartile
  
  # Compute IQR = Q3 − Q1
  iqr = q3 - q1                       # 1×m

  # Ensure all results are treated as matrices
    med = as.matrix(med)
    q1 = as.matrix(q1)
    q3 = as.matrix(q3)  
    iqr = as.matrix(iqr)
  
  # Prevent division by zero or NaN: replace zeros/NaNs with 1
  iqr = replace(target=iqr, pattern=0, replacement=1)
  iqr = replace(target=iqr, pattern=NaN, replacement=1)
  
  # Apply robust scaling: (X − med) ÷ iqr
  Y = (X - med) / iqr
}