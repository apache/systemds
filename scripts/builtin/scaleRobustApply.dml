# Apply robust scaling using precomputed medians and IQRs
#
# INPUT:
# -------------------------------------------------------------------------------------
# X      Input feature matrix of shape n-by-m
# med    Column medians (Q2) of shape 1-by-m
# iqr    Column interquartile ranges (Q3 - Q1) of shape 1-by-m
# -------------------------------------------------------------------------------------
#
# OUTPUT:
# -------------------------------------------------------------------------------------
# Y      Scaled output matrix of shape n-by-m
# -------------------------------------------------------------------------------------

m_scaleRobustApply = function(Matrix[Double] X, Matrix[Double] med, Matrix[Double] iqr)
  return (Matrix[Double] Y)
{

    # Ensure all inputs are treated as matrices
    med = as.matrix(med) 
    iqr = as.matrix(iqr)

  # Ensure robust scaling is safe by replacing invalid IQRs
  iqr = replace(target=iqr, pattern=0, replacement=1)
  iqr = replace(target=iqr, pattern=NaN, replacement=1)
  # Apply robust transformation
  Y = (X - med) / iqr
}
