#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

# The toOneHot-function encodes unordered categorical vector to multiple binary vectors.
#
# .. code-block:: python
#
#   >>> import numpy as np
#   >>> from systemds.context import SystemDSContext
#   >>> from systemds.operator.algorithm import toOneHot
#   >>> 
#   >>> with SystemDSContext() as sds:
#   ...     X = sds.from_numpy(np.array([[1], [3], [2], [3]]))
#   ...     Y = toOneHot(X, numClasses=3).compute()
#   ...     print(Y)
#   [[1. 0. 0.]
#    [0. 0. 1.]
#    [0. 1. 0.]
#    [0. 0. 1.]]
#
#
# INPUT:
# ------------------------------------------------------------------------------------------
# X           Vector with N integer entries between 1 and numClasses
# numclasses  Number of columns, must be be greater than or equal to largest value in X
# ------------------------------------------------------------------------------------------
#
# OUTPUT:
# ------------------------------------------------------------------------------------
# Y     One-hot-encoded matrix with shape (N, numClasses)
# ------------------------------------------------------------------------------------

m_toOneHot = function(Matrix[Double] X, integer numClasses)
        return (Matrix[Double] Y) {
    if(numClasses < max(X))
      stop("numClasses must be >= largest value in X to prevent cropping");
    Y = table(seq(1, nrow(X)), X, nrow(X), numClasses);
}
