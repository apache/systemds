/*DML-script implementing the ssb query Q1.3 in SystemDS.
SELECT SUM(lo_extendedprice * lo_discount) AS REVENUE
FROM lineorder, dates
WHERE
    lo_orderdate = d_datekey
    AND d_weeknuminyear = 6
    AND d_year = 1994
    AND lo_discount BETWEEN 5 AND 7
    AND lo_quantity BETWEEN 26 AND 35;

Usage:
./bin/systemds scripts/ssb/queries/q1_3.dml -nvargs input_dir="/path/to/data"
./bin/systemds scripts/ssb/queries/q1_3.dml -nvargs input_dir="/Users/ghafekalsaho/Desktop/data"
or with explicit -f flag:
./bin/systemds -f scripts/ssb/queries/q1_3.dml -nvargs input_dir="/path/to/data"

Parameters:
input_dir - Path to input directory containing the table files (e.g., ./data)
*/


# -- SOURCING THE RA-FUNCTIONS --
source("./scripts/builtin/raSelection.dml") as raSel
source("./scripts/builtin/raJoin.dml") as raJoin

# -- PARAMETER HANDLING --
input_dir = ifdef($input_dir, "./data");

# -- READING INPUT FILES --
# CSV TABLES
date_csv = read(input_dir + "/date.tbl", data_type="frame", format="csv", header=FALSE, sep="|");
lineorder_csv = read(input_dir + "/lineorder.tbl", data_type="frame", format="csv", header=FALSE, sep="|");

# -- PREPARING --
# Optimized approach: Two-pass filtering with direct matrix construction
# Convert date columns to numeric matrices for proper handling
date_keys_matrix = as.matrix(date_csv[, 1]);  # date_key
date_year_matrix = as.matrix(date_csv[, 5]);  # d_year
date_weeknum_matrix = as.matrix(date_csv[, 12]); # d_weeknuminyear

# Count matching rows first to pre-allocate matrix efficiently
date_nrows = nrow(date_csv);
matching_count = 0;
for (i in 1:date_nrows) {
    year_val = as.scalar(date_year_matrix[i, 1]);
    weeknum_val = as.scalar(date_weeknum_matrix[i, 1]);
    if (year_val == 1994 && weeknum_val == 6) {
        matching_count = matching_count + 1;
    }
}

# Pre-allocate final matrix and fill in single pass
date_filtered = matrix(0, matching_count, 2);
filtered_idx = 0;
for (i in 1:date_nrows) {
    year_val = as.scalar(date_year_matrix[i, 1]);
    weeknum_val = as.scalar(date_weeknum_matrix[i, 1]);
    if (year_val == 1994 && weeknum_val == 6) {
        filtered_idx = filtered_idx + 1;
        date_filtered[filtered_idx, 1] = as.scalar(date_keys_matrix[i, 1]);  # date_key
        date_filtered[filtered_idx, 2] = 1;  # encoded value for matching criteria
    }
}

# EXTRACTING MINIMAL LINEORDER DATA TO OPTIMIZE RUNTIME => COL-6 : LO_ORDERDATE |
# COL-9 : LO_QUANTITY | COL-10 : LO_EXTPRICE | COL-12 : LO_DISCOUNT
lineorder_csv_min = cbind(lineorder_csv[, 6], lineorder_csv[, 9], lineorder_csv[, 10], lineorder_csv[, 12]);
lineorder_min_matrix = as.matrix(lineorder_csv_min);

# -- FILTERING THE DATA WITH RA-SELECTION FUNCTION --
# We already filtered for D_YEAR = 1994 AND D_WEEKNUMINYEAR = 6, so date_filtered is our filtered date data
d_year_filt = date_filtered;

# LO_QUANTITY BETWEEN 26 AND 35
lo_quan_filt = raSel::m_raSelection(lineorder_min_matrix, col=2, op=">=", val=26);
lo_quan_filt = raSel::m_raSelection(lo_quan_filt, col=2, op="<=", val=35);

# LO_DISCOUNT BETWEEN 5 AND 7 (FIXED: was incorrectly >=6)
lo_quan_disc_filt = raSel::m_raSelection(lo_quan_filt, col=4, op=">=", val=5);
lo_quan_disc_filt = raSel::m_raSelection(lo_quan_disc_filt, col=4, op="<=", val=7);


# -- JOIN TABLES WITH RA-JOIN FUNCTION --
# JOINING FILTERED LINEORDER TABLE WITH FILTERED DATE TABLE WHERE LO_ORDERDATE = D_DATEKEY
joined_matrix = raJoin::m_raJoin(A=lo_quan_disc_filt, colA=1, B=d_year_filt, colB=1, method="sort-merge");


# -- AGGREGATION --
lo_extprice = joined_matrix[, 3];		#LO_EXTPRICE : 3 COLUMN OF JOINED-MATRIX
lo_disc = joined_matrix[, 4];			#LO_DISCOUNT : 4 COLUMN OF JOINED-MATRIX
revenue = sum(lo_extprice * lo_disc);

print("REVENUE: " + as.integer(revenue));