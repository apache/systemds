source("./scripts/builtin/raSelection.dml") as raSel
source("./scripts/builtin/raGroupby.dml") as raGrp
source("./scripts/builtin/raJoin.dml") as raJoin

# READ INPUTS
date = read("./data/date.tbl", data_type="frame", format="csv", header=FALSE, sep="|");
data_jspec = read("./scripts/specs/date.tfspec_recode.json", data_type="scalar", value_type="string");
[date_matrix, date_meta] = transformencode(target=date, spec=data_jspec);

lineorder = read("./data/lineorder3.tbl", data_type="frame", format="csv", header=FALSE, sep="|");
lineorder_jspec = read("./scripts/specs/lineorder.tfspec_recode.json", data_type="scalar", value_type="string");
[lineorder_matrix, lineorder_meta] = transformencode(target=lineorder, spec=lineorder_jspec);

part = read("./data/part.tbl", data_type="frame", format="csv", header=FALSE, sep="|");
part_jspec = read("./scripts/specs/part.tfspec_recode.json", data_type="scalar", value_type="string");
[part_matrix, part_meta] = transformencode(target=part, spec=part_jspec);

supplier = read("./data/supplier.tbl", data_type="frame", format="csv", header=FALSE, sep="|");
supplier_jspec = read("./scripts/specs/supplier.tfspec_recode.json", data_type="scalar", value_type="string");
[supplier_matrix, supplier_meta] = transformencode(target=supplier, spec=supplier_jspec);

# FILTERS
# "MFGR#12"
part_filt = raSel::m_raSelection(part_matrix, col=4, op="==", val=2);

# 'AMERICA'
sup_filt = raSel::m_raSelection(supplier_matrix, col=6, op="==", val=1);

# JOIN: lineorder ⨝ date
lo_date = raJoin::m_raJoin(A=lineorder_matrix, colA=6, B=date_matrix, colB=1, method="sort-merge");

# JOIN: ⨝ part
lo_date_part = raJoin::m_raJoin(A=lo_date, colA=4, B=part_filt, colB=1, method="sort-merge");

# JOIN: ⨝ supplier
joined_matrix = raJoin::m_raJoin(A=lo_date_part, colA=5, B=sup_filt, colB=1, method="sort-merge");

# PREPARE GROUPBY
revenue = joined_matrix[,13];
d_year = joined_matrix[,(ncol(lineorder_matrix) + 5)];
p_brand = joined_matrix[,(ncol(lineorder_matrix) + ncol(date_matrix) + 5)];


# GROUPBY
max_p_brand = max(p_brand);
scale_factor = ceil(max_p_brand) + 1;
year_brand = d_year * scale_factor + p_brand;

group2_input = cbind(revenue, year_brand);
agg_result = raGrp::m_raGroupby(X=group2_input, col=2, method="nested-loop");

c_1 = agg_result[, 1];
c_2 = agg_result[, 2] + agg_result[, 3]; #SUM LOOP
summed_result = cbind(c_1, c_2);

ordered_result = order(target=summed_result, by=2, decreasing=FALSE, index.return=FALSE);

p_brand2 = round(((ordered_result[, 1] / scale_factor) - floor(ordered_result[, 1] / scale_factor)) * scale_factor);
d_year2 = round((ordered_result[,1] / scale_factor - p_brand2 / scale_factor));

result = cbind(ordered_result[,2], d_year2, p_brand2);
result_ordered = order(target=result, by=1, decreasing=FALSE, index.return=FALSE); # 1=REVENUE


# DECODING p_brand
part_jspec2 = read("./scripts/specs/part2.tfspec_recode.json", data_type="scalar", value_type="string");
A = part_meta[, 5];
B = transformdecode(target=result_ordered[, 3], spec=part_jspec2, meta=A);
res = cbind(as.frame(result_ordered[, 1]), as.frame(result_ordered[, 2]), B);

print(res);