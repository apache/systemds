source("./scripts/builtin/raSelection.dml") as raSel
source("./scripts/builtin/raGroupby.dml") as raGrp
source("./scripts/builtin/raJoin.dml") as raJoin

# READ INPUTS
date = read("./data/date.tbl", data_type="frame", format="csv", header=FALSE, sep="|");
data_jspec = read("./scripts/specs/date.tfspec_recode.json", data_type="scalar", value_type="string");
[date_matrix, date_meta] = transformencode(target=date, spec=data_jspec);
print("date loaded and transformed.");

lineorder = read("./data/lineorder3.tbl", data_type="frame", format="csv", header=FALSE, sep="|");
lineorder_jspec = read("./scripts/specs/lineorder.tfspec_recode.json", data_type="scalar", value_type="string");
[lineorder_matrix, lineorder_meta] = transformencode(target=lineorder, spec=lineorder_jspec);
print("lineorder loaded and transformed.");

part = read("./data/part.tbl", data_type="frame", format="csv", header=FALSE, sep="|");
part_jspec = read("./scripts/specs/part.tfspec_recode.json", data_type="scalar", value_type="string");
[part_matrix, part_meta] = transformencode(target=part, spec=part_jspec);
print("part loaded and transformed.");

supplier = read("./data/supplier.tbl", data_type="frame", format="csv", header=FALSE, sep="|");
supplier_jspec = read("./scripts/specs/supplier.tfspec_recode.json", data_type="scalar", value_type="string");
[supplier_matrix, supplier_meta] = transformencode(target=supplier, spec=supplier_jspec);

print("supplier loaded and transformed.");


#date = 0;
#lineorder = 0;
#part = 0;
#supplier = 0;


# FILTERS
# p_brand BETWEEN 'MFGR#2221' AND 'MFGR#2228'
vals = matrix("453 597 907 282 850 525 538 608", rows=8, cols=1);
part_filt = matrix(0, rows=0, cols=ncol(part_matrix));

for (i in 1:nrow(vals)) {
    temp = raSel::m_raSelection(part_matrix, col=5, op="==", val=as.scalar(vals[i, 1]));
    #print(as.scalar(vals[i, 1]) + ": " + nrow(temp));
    part_filt = rbind(part_filt, temp);
}

# region = 'ASIA'
sup_filt = raSel::m_raSelection(supplier_matrix, col=6, op="==", val=5);

print("Selection done.");


# JOIN: lineorder ⨝ date
lo_date = raJoin::m_raJoin(A=lineorder_matrix, colA=6, B=date_matrix, colB=1, method="sort-merge");
print("lo-date joined");

# JOIN: ⨝ part
lo_date_part = raJoin::m_raJoin(A=lo_date, colA=4, B=part_filt, colB=1, method="sort-merge");
print("lo-date-part joined");

# JOIN: ⨝ supplier
joined_matrix = raJoin::m_raJoin(A=lo_date_part, colA=5, B=sup_filt, colB=1, method="sort-merge");
print("lo-date-part-supplier joined");

print("All tables joined.");


# PREPARE GROUPBY
revenue = joined_matrix[,13];
d_year = joined_matrix[,(ncol(lineorder_matrix) + 5)];
p_brand = joined_matrix[,(ncol(lineorder_matrix) + ncol(date_matrix) + 5)];


# GROUPBY d_year & p_brand
max_p_brand = max(p_brand);
scale_factor = ceil(max_p_brand) + 1;
year_brand = d_year * scale_factor + p_brand;

group_input = cbind(revenue, year_brand);
agg_result = raGrp::m_raGroupby(X=group_input, col=2, method="nested-loop");
#print(agg_result);


c_1 = agg_result[, 1];
summed_result = matrix(0, rows=nrow(agg_result), cols=1);

for (i in 2:ncol(agg_result)) {
    temp = agg_result[, i];
    summed_result = summed_result + temp;

}

group_result = cbind(c_1, summed_result);


p_brand = round(((group_result[, 1] / scale_factor) - floor(group_result[, 1] / scale_factor)) * scale_factor);
d_year = round((group_result[,1] / scale_factor - p_brand / scale_factor));

result = cbind(group_result[, 2], d_year, p_brand);

print("Aggregated revenue grouped by year and brand:");


# Kombinierter Hilfsschlüssel für korrektes ORDER BY:
sort_key = d_year * scale_factor + p_brand;

# Nach kombinierten Schlüssel sortieren (das entspricht ORDER BY d_year, p_brand):
ordered_result = order(target=cbind(sort_key, result), by=1, decreasing=FALSE, index.return=FALSE);

# Ergebnis ohne Hilfsspalte:
result_ordered = ordered_result[, 2:4];
print(result_ordered);


# DECODING p_brand
part_jspec2 = read("./scripts/specs/part2.tfspec_recode.json", data_type="scalar", value_type="string");
part_meta_col = part_meta[, 5];
p_brand_dec = transformdecode(target=result_ordered[, 3], spec=part_jspec2, meta=part_meta_col);
res = cbind(as.frame(result_ordered[, 1]), as.frame(result_ordered[, 2]), p_brand_dec);

print(res);
print("Q2.2 finished");

