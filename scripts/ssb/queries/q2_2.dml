source("./scripts/builtin/raSelection.dml") as raSel
source("./scripts/builtin/raGroupby.dml") as raGrp
source("./scripts/builtin/raJoin.dml") as raJoin

# READ INPUTS
date = read("./data/date.tbl", data_type="frame", format="csv", header=FALSE, sep="|");
data_jspec = read("./scripts/specs/date.tfspec_recode.json", data_type="scalar", value_type="string");
[date_matrix, date_meta] = transformencode(target=date, spec=data_jspec);
print("date loaded and transformed.");

lineorder = read("./data/lineorder3.tbl", data_type="frame", format="csv", header=FALSE, sep="|");
lineorder_jspec = read("./scripts/specs/lineorder.tfspec_recode.json", data_type="scalar", value_type="string");

[lineorder_matrix, lineorder_meta] = transformencode(target=lineorder, spec=lineorder_jspec);
print("lineorder loaded and transformed.");

part = read("./data/part.tbl", data_type="frame", format="csv", header=FALSE, sep="|");
part_jspec = read("./scripts/specs/part.tfspec_recode.json", data_type="scalar", value_type="string");
[part_matrix, part_meta] = transformencode(target=part, spec=part_jspec);
print("part loaded and transformed.");
#print(part_meta);

supplier = read("./data/supplier.tbl", data_type="frame", format="csv", header=FALSE, sep="|");
supplier_jspec = read("./scripts/specs/supplier.tfspec_recode.json", data_type="scalar", value_type="string");
[supplier_matrix, supplier_meta] = transformencode(target=supplier, spec=supplier_jspec);
print("supplier loaded and transformed.");
#print(supplier_meta);

# JOIN: lineorder ⨝ date on lo_orderdate = d_datekey (colA=6, colB=1)
lo_date = raJoin::m_raJoin(A=lineorder_matrix, colA=6, B=date_matrix, colB=1, method="sort-merge");

# JOIN: ⨝ part on lo_partkey = p_partkey (colA=3, colB=1)
lo_date_part = raJoin::m_raJoin(A=lo_date, colA=4, B=part_matrix, colB=1, method="sort-merge");

# JOIN: ⨝ supplier on lo_suppkey = s_suppkey (colA=4, colB=1)
joined_matrix = raJoin::m_raJoin(A=lo_date_part, colA=5, B=supplier_matrix, colB=1, method="sort-merge");
print("All tables joined.");


# FILTERS
# "MFGR#12"
filt_cat = raSel::m_raSelection(joined_matrix, col=(4 + ncol(lineorder_matrix) + ncol(date_matrix)), op="==", val=2);

# s_region = 'AMERICA'
filt_region = raSel::m_raSelection(filt_cat, col=(6 + ncol(lineorder_matrix) + ncol(date_matrix) + ncol(part_matrix)), op="==", val=1);


# PREPARE GROUPBY
revenue = filt_region[,13];
d_year = filt_region[,(ncol(lineorder_matrix) + 5)];
p_brand = filt_region[,(ncol(lineorder_matrix) + ncol(date_matrix) + 5)];


# GROUPBY
group_input = cbind(revenue, d_year, p_brand);
#go = order(target=group_input, by=1, decreasing=FALSE, index.return=FALSE);
#print(go);
#print(nrow(go) + ", " + ncol(go));

year_brand = d_year * 1000 + p_brand
group2_input = cbind(revenue, year_brand);

agg_result = raGrp::m_raGroupby(X=group2_input, col=2, method="nested-loop");
print(agg_result);
print(nrow(agg_result) + ", " + ncol(agg_result));
ordered_result = order(target= agg_result, by=2, decreasing=FALSE, index.return=FALSE);
print(ordered_result);

/*
agg_result2 = raGrp::m_raGroupby(X= agg_result, col=3, method="nested-loop");
#print(agg_result2);

ordered_result = order(target=agg_result2, by=3, decreasing=FALSE, index.return=FALSE);

print("Aggregated revenue grouped by year and brand:");
#print(ordered_result);
*/