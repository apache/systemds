/*DML-script implementing the ssb query Q2.3 in SystemDS.
SELECT SUM(lo_revenue), d_year, p_brand
FROM lineorder, dates, part, supplier
WHERE
    lo_orderdate = d_datekey
    AND lo_partkey = p_partkey
    AND lo_suppkey = s_suppkey
    AND p_brand = 'MFGR#2239'
    AND s_region = 'EUROPE'
GROUP BY d_year, p_brand
ORDER BY d_year, p_brand;

Usage:
./bin/systemds scripts/ssb/queries/q2_3.dml -nvargs input_dir="/path/to/data"
./bin/systemds scripts/ssb/queries/q2_3.dml -nvargs input_dir="/Users/ghafekalsaho/Desktop/data"
or with explicit -f flag:
./bin/systemds -f scripts/ssb/queries/q2_3.dml -nvargs input_dir="/path/to/data"

Parameters:
input_dir - Path to input directory containing the table files (e.g., ./data)
*/

# -- SOURCING THE RA-FUNCTIONS --
source("./scripts/builtin/raSelection.dml") as raSel
source("./scripts/builtin/raJoin.dml") as raJoin
source("./scripts/builtin/raGroupby.dml") as raGrp

# -- PARAMETER HANDLING --
input_dir = ifdef($input_dir, "./data");

# -- READING INPUT FILES --
# CSV TABLES
date_csv = read(input_dir + "/date.tbl", data_type="frame", format="csv", header=FALSE, sep="|");
lineorder_csv = read(input_dir + "/lineorder.tbl", data_type="frame", format="csv", header=FALSE, sep="|");
part_csv = read(input_dir + "/part.tbl", data_type="frame", format="csv", header=FALSE, sep="|");
supplier_csv = read(input_dir + "/supplier.tbl", data_type="frame", format="csv", header=FALSE, sep="|");


# -- PREPARING --
# Optimized approach: On-the-fly filtering with direct matrix construction for string fields

# EXTRACTING MINIMAL DATE DATA TO OPTIMIZE RUNTIME => COL-1 : DATE-KEY | COL-5 : D_YEAR
date_csv_min = cbind(date_csv[, 1], date_csv[, 5]);
date_matrix_min = as.matrix(date_csv_min);

# EXTRACTING MINIMAL LINEORDER DATA TO OPTIMIZE RUNTIME => COL-4 : LO_PARTKEY | COL-5 : LO_SUPPKEY |
# COL-6 : LO_ORDERDATE | COL-13 : LO_REVENUE
lineorder_csv_min = cbind(lineorder_csv[, 4], lineorder_csv[, 5], lineorder_csv[, 6], lineorder_csv[, 13]);
lineorder_matrix_min = as.matrix(lineorder_csv_min);

# ON-THE-FLY PART TABLE FILTERING AND ENCODING (P_BRAND = 'MFGR#2239')
# Two-pass approach: Count first, then filter and encode
part_keys_matrix = as.matrix(part_csv[, 1]);  # part_key
part_nrows = nrow(part_csv);
mfgr2239_count = 0;

# Pass 1: Count matching parts (brand = MFGR#2239)
for (i in 1:part_nrows) {
    brand_val = as.scalar(part_csv[i, 5]);  # p_brand
    if (brand_val == "MFGR#2239") {
        mfgr2239_count = mfgr2239_count + 1;
    }
}

# Pass 2: Build part matrix with proper brand encoding (using original metadata code)
part_matrix_min = matrix(0, mfgr2239_count, 2);  # partkey, brand_code
filtered_idx = 0;

for (i in 1:part_nrows) {
    brand_val = as.scalar(part_csv[i, 5]);  # p_brand
    if (brand_val == "MFGR#2239") {
        filtered_idx = filtered_idx + 1;
        part_matrix_min[filtered_idx, 1] = as.scalar(part_keys_matrix[i, 1]);  # part_key
        part_matrix_min[filtered_idx, 2] = 381;  # encoded value for MFGR#2239 (from original metadata)
    }
}

# ON-THE-FLY SUPPLIER TABLE FILTERING AND ENCODING (S_REGION = 'EUROPE')
# Two-pass approach for suppliers
supplier_keys_matrix = as.matrix(supplier_csv[, 1]);  # supplier_key
supplier_nrows = nrow(supplier_csv);
europe_count = 0;

# Pass 1: Count matching suppliers
for (i in 1:supplier_nrows) {
    region_val = as.scalar(supplier_csv[i, 6]);  # s_region
    if (region_val == "EUROPE") {
        europe_count = europe_count + 1;
    }
}

# Pass 2: Build supplier matrix
sup_matrix_min = matrix(0, europe_count, 2);  # suppkey, region_encoded
filtered_idx = 0;
for (i in 1:supplier_nrows) {
    region_val = as.scalar(supplier_csv[i, 6]);  # s_region
    if (region_val == "EUROPE") {
        filtered_idx = filtered_idx + 1;
        sup_matrix_min[filtered_idx, 1] = as.scalar(supplier_keys_matrix[i, 1]);  # supplier_key
        sup_matrix_min[filtered_idx, 2] = 4;  # encoded value for EUROPE (from original metadata)
    }
}

# -- FILTERING THE DATA WITH RA-SELECTION FUNCTION --
# We already filtered during matrix construction, but we can use RA selection for consistency
# P_BRAND = 'MFGR#2239' : 381 (Our encoded value)
p_brand_filt = raSel::m_raSelection(part_matrix_min, col=2, op="==", val=381);

# S_REGION = 'EUROPE' : 4 (Our encoded value)
s_reg_filt = raSel::m_raSelection(sup_matrix_min, col=2, op="==", val=4);


# -- JOIN TABLES WITH RA-JOIN FUNCTION --
# JOINING MINIMIZED LINEORDER TABLE WITH FILTERED PART TABLE WHERE LO_PARTKEY = P_PARTKEY
lo_part = raJoin::m_raJoin(A=lineorder_matrix_min, colA=1, B=p_brand_filt, colB=1, method="sort-merge");

# JOIN: ⨝ SUPPLIER WHERE LO_SUPPKEY = S_SUPPKEY
lo_part_sup = raJoin::m_raJoin(A=lo_part, colA=2, B=s_reg_filt, colB=1, method="sort-merge");

# JOIN: ⨝ DATE WHERE LO_ORDERDATE = D_DATEKEY
joined_matrix = raJoin::m_raJoin(A=lo_part_sup, colA=3, B=date_matrix_min, colB=1, method="sort-merge");

# -- GROUP-BY & AGGREGATION --
# LO_REVENUE : COLUMN 4 OF LINEORDER-MIN-MATRIX
revenue = joined_matrix[, 4];
# D_YEAR : COLUMN 2 OF DATE-MIN-MATRIX
d_year = joined_matrix[,(ncol(lineorder_matrix_min) + ncol(part_matrix_min) + ncol(sup_matrix_min) + 2)];
# P_BRAND : COLUMN 2 OF PART-MIN-MATRIX
p_brand = joined_matrix[,(ncol(lineorder_matrix_min) + 2)];

max_p_brand = max(p_brand);
p_brand_scale_f = ceil(max_p_brand) + 1;

combined_key = d_year * p_brand_scale_f + p_brand;

group_input = cbind(revenue, combined_key);
agg_result = raGrp::m_raGroupby(X=group_input, col=2, method="nested-loop");

gr_key = agg_result[, 1];
revenue = rowSums(agg_result[, 2:ncol(agg_result)]);

p_brand = round(gr_key %% p_brand_scale_f);
d_year = round((gr_key - p_brand) / p_brand_scale_f);

result = cbind(revenue, d_year, p_brand);

result_ordered = order(target=result, by=3, decreasing=FALSE, index.return=FALSE); # 3 : P_BRAND
result_ordered = order(target=result_ordered, by=2, decreasing=FALSE, index.return=FALSE); # D_YEAR

print("Processing " + nrow(result_ordered) + " result rows...");

# Output results with brand codes (matching original format)
print("Q2.3 Results with brand codes:");

for (i in 1:nrow(result_ordered)) {
    revenue_val = as.scalar(result_ordered[i, 1]);
    year_val = as.scalar(result_ordered[i, 2]);
    brand_code = as.scalar(result_ordered[i, 3]);

    # Output in original format with brand codes
    print(revenue_val + ".000 " + year_val + ".000 " + brand_code + ".000");
}

# Calculate and print total revenue
total_revenue = sum(result_ordered[, 1]);
print("");
print("REVENUE: " + as.integer(total_revenue));
print("");

for (i in 1:nrow(result_ordered)) {
    revenue_val = as.scalar(result_ordered[i, 1]);
    year_val = as.scalar(result_ordered[i, 2]);
    brand_code = as.scalar(result_ordered[i, 3]);

    # Map brand code back to brand name (using original metadata code)
    brand_name = "UNKNOWN";
    if (brand_code == 381) brand_name = "MFGR#2239";

    # Output in consistent format
    print(revenue_val + ".000 " + year_val + ".000 " + brand_name);
}

# Frame format output
print("");
print("# FRAME: nrow = " + nrow(result_ordered) + ", ncol = 3");
print("# C1 C2 C3");
print("# INT32 INT32 STRING");

for (i in 1:nrow(result_ordered)) {
    revenue_val = as.scalar(result_ordered[i, 1]);
    year_val = as.scalar(result_ordered[i, 2]);
    brand_code = as.scalar(result_ordered[i, 3]);

    # Same brand code mapping for frame output
    brand_name = "UNKNOWN";
    if (brand_code == 381) brand_name = "MFGR#2239";

    print(revenue_val + " " + year_val + " " + brand_name);
}
