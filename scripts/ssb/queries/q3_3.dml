source("./scripts/builtin/raSelection.dml") as raSel
source("./scripts/builtin/raGroupby.dml") as raGrp
source("./scripts/builtin/raJoin.dml") as raJoin

# READ INPUTS
date = read("./data/date.tbl", data_type="frame", format="csv", header=FALSE, sep="|");
data_jspec = read("./scripts/specs/date.tfspec_recode.json", data_type="scalar", value_type="string");
[date_matrix, date_meta] = transformencode(target=date, spec=data_jspec);


customer = read("./data/customer.tbl", data_type="frame", format="csv", header=FALSE, sep="|");
customer_jspec = read("./scripts/specs/customer.tfspec_recode.json", data_type="scalar", value_type="string");
[customer_matrix, customer_meta] = transformencode(target=customer, spec=customer_jspec);

supplier = read("./data/supplier.tbl", data_type="frame", format="csv", header=FALSE, sep="|");
supplier_jspec = read("./scripts/specs/supplier.tfspec_recode.json", data_type="scalar", value_type="string");
[supplier_matrix, supplier_meta] = transformencode(target=supplier, spec=supplier_jspec);

lineorder = read("./data/lineorder3.tbl", data_type="frame", format="csv", header=FALSE, sep="|");
lineorder_jspec = read("./scripts/specs/lineorder.tfspec_recode.json", data_type="scalar", value_type="string");
[lineorder_matrix, lineorder_meta] = transformencode(target=lineorder, spec=lineorder_jspec);

# FILTERS
#  c_city = 'UNITED KI1' (207) OR 'UNITED KI5' (15)
cust_filt_KI1 = raSel::m_raSelection(customer_matrix, col=4, op="==", val=207);
cust_filt_KI5 = raSel::m_raSelection(customer_matrix, col=4, op="==", val=15);
cust_filt = rbind(cust_filt_KI1, cust_filt_KI5);

# s_city = 'UNITED KI1'(60) OR 'UNITED KI5' (153)
sup_filt_KI1 = raSel::m_raSelection(supplier_matrix, col=4, op="==", val=60);
sup_filt_KI5 = raSel::m_raSelection(supplier_matrix, col=4, op="==", val=153);
sup_filt = rbind(sup_filt_KI1, sup_filt_KI5);

# d_year BETWEEN 1992 & 1997
date_filt = raSel::m_raSelection(date_matrix, col=5, op=">=", val=1992);
date_filt = raSel::m_raSelection(date_filt, col=5, op="<=", val=1997);

# JOIN: lineorder ⨝ date
lo_date = raJoin::m_raJoin(A=lineorder_matrix, colA=6, B=date_filt, colB=1, method="sort-merge");

# JOIN: ⨝ customer
lo_date_cust = raJoin::m_raJoin(A=lo_date, colA=3, B=cust_filt, colB=1, method="sort-merge");

# JOIN: ⨝ supplier
joined_matrix = raJoin::m_raJoin(A=lo_date_cust, colA=5, B=sup_filt, colB=1, method="sort-merge");

# PREPARE GROUPBY
revenue = joined_matrix[,13];
d_year = joined_matrix[,(ncol(lineorder_matrix) + 5)];
c_city = joined_matrix[,(ncol(lineorder_matrix) + ncol(date_matrix) + 4)];
s_city = joined_matrix[,(ncol(lineorder_matrix) + ncol(date_matrix) + ncol(customer_matrix) + 4)];

# GROUPBY c_nation, s_nation, d_year
# Berechne maximale Werte:
max_c_city= max(c_city);
max_s_city = max(s_city);
max_d_year = max(d_year);

# Skalierungsfaktoren:
c_city_scale_f = ceil(max_c_city) + 1;
s_city_scale_f = ceil(max_s_city) + 1;
d_year_scale_f = ceil(max_d_year) + 1;

combined_key = c_city * s_city_scale_f * d_year_scale_f + s_city * d_year_scale_f + d_year;

group_input = cbind(revenue, combined_key);
agg_result = raGrp::m_raGroupby(X=group_input, col=2, method="nested-loop");

key = agg_result[, 1];
summed_result = matrix(0, rows=nrow(agg_result), cols=1);

for (i in 2:ncol(agg_result)) {
    temp = agg_result[, i];
    summed_result = summed_result + temp;

}

group_result = cbind(key, summed_result);

revenue = group_result[, 2];
d_year = round(key %% d_year_scale_f);
c_city = round(floor(key / (s_city_scale_f * d_year_scale_f)));
s_city = round((floor(key / d_year_scale_f)) %% s_city_scale_f);


result = cbind(c_city, s_city, d_year, revenue);

result = order(target=result, by=4, decreasing=TRUE, index.return=FALSE);
result = order(target=result, by=3, decreasing=FALSE, index.return=FALSE);


# DECODING p_brand
cust_jspec2 = read("./scripts/specs/part2.tfspec_recode.json", data_type="scalar", value_type="string");
cust_meta_col = customer_meta[, 4];
sup_meta_col = supplier_meta[, 4];
c_cit_dec = transformdecode(target=result[, 1], spec=cust_jspec2, meta=cust_meta_col);
s_cit_dec = transformdecode(target=result[, 2], spec=cust_jspec2, meta=sup_meta_col);
res = cbind(c_cit_dec, s_cit_dec, as.frame(result[, 3]), as.frame(result[, 4]));

print(res);