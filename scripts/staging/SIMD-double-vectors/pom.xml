<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.apache</groupId>
		<artifactId>apache</artifactId>
		<version>24</version>
	</parent>
	<groupId>org.apache.systemds</groupId>
	<version>3.1.0-SNAPSHOT</version>
	<artifactId>systemds</artifactId>
	<packaging>jar</packaging>
	<name>Apache SystemDS</name>
	<url>https://github.com/apache/systemds</url>
	<description>An open source ML system for the end-to-end data science lifecycle</description>
	<licenses>
		<license>
			<name>Apache 2.0 License</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
		</license>
	</licenses>

	<properties>
		<hadoop.version>3.3.3</hadoop.version>
		<antlr.version>4.8</antlr.version>
		<protobuf.version>3.20.3</protobuf.version>
		<spark.version>3.2.0</spark.version>
		<scala.version>2.12.0</scala.version>
		<scala.binary.version>2.12</scala.binary.version>
		<maven.build.timestamp.format>yyyy-MM-dd HH:mm:ss z</maven.build.timestamp.format>
		<project.build.outputTimestamp>1</project.build.outputTimestamp>
		<enableGPU>false</enableGPU>
		<jcuda.scope>provided</jcuda.scope>
		<jcuda.version>10.2.0</jcuda.version>
		<slf4j.version>1.7.36</slf4j.version>
		<log4j.version>2.17.2</log4j.version>
		<!-- Set java compile level via argument, ex: 1.8 1.9 10 11-->
		<java.level>17</java.level>
		<!-->Testing settings<!-->
		<maven.test.skip>true</maven.test.skip>
		<test-parallel>classes</test-parallel>
		<test-threadCount>2</test-threadCount>
		<test-forkCount>1C</test-forkCount>
		<rerun.failing.tests.count>2</rerun.failing.tests.count>
		<jacoco.skip>true</jacoco.skip>
		<jacoco.include>**</jacoco.include>
		<automatedtestbase.outputbuffering>false</automatedtestbase.outputbuffering>
		<argLine>-Xms3000m -Xmx3000m -Xmn300m</argLine>
		<enableStats>false</enableStats>
	</properties>

	<repositories>
		<repository>
			<id>central</id>
			<url>https://repo1.maven.org/maven2</url>
			<releases>
				<enabled>true</enabled>
			</releases>
		</repository>
	</repositories>

	<scm>
		<developerConnection>scm:git:https://github.com/apache/systemds.git</developerConnection>
		<tag>HEAD</tag>
	</scm>

	<build>
		<!-- Adds scripts to main jar, in-memory jar, sources jar, and standalone jar -->
		<resources>
			<resource>
				<directory>scripts</directory>
				<excludes>
					<exclude>algorithms/obsolete/*</exclude>
					<exclude>datagen/obsolete/*</exclude>
					<exclude>perftest/**/*</exclude>
					<exclude>perftest</exclude>
					<exclude>perftestDeprecated/*</exclude>
					<exclude>perftestDeprecated</exclude>
					<exclude>staging/**/*</exclude>
					<exclude>nn/test/compare_backends/*</exclude>
					<exclude>nn/test/compare_backends/*</exclude>
				</excludes>
				<targetPath>scripts</targetPath>
			</resource>
			<resource>
				<directory>src/main/cuda/kernels</directory>
				<includes>
					<include>SystemDS.ptx</include>
					<include>reduction.ptx</include>
				</includes>
				<targetPath>cuda/kernels</targetPath>
			</resource>
			<resource>
				<directory>src/main/cpp/lib</directory>
				<targetPath>lib</targetPath>
			</resource>
			<resource>
				<directory>src/main/cuda/spoof</directory>
				<targetPath>cuda/spoof</targetPath>
			</resource>
			<resource>
				<directory>src/main/cuda/headers</directory>
				<includes>
					<include>agg_ops.cuh</include>
					<include>operators.cuh</include>
					<include>reduction.cuh</include>
					<include>spoof_utils.cuh</include>
					<include>TempStorage.cuh</include>
					<include>utils.cuh</include>
					<include>vector_write.cuh</include>
					<include>vector_add.cuh</include>
					<include>Matrix.h</include>
				</includes>
				<targetPath>cuda/headers</targetPath>
			</resource>
			<resource>
				<directory>src/main/java/org/apache/sysds/hops/codegen/cplan/java</directory>
				<includes>
					<include>Cellwise.java.template</include>
					<include>Rowwise.java.template</include>
				</includes>
				<targetPath>java/spoof</targetPath>
			</resource>
		</resources>

		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>unpack</id>
						<phase>package</phase>
						<goals>
							<goal>unpack</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>org.apache.hadoop</groupId>
									<artifactId>hadoop-test</artifactId>
									<version>1.2.1</version>
									<type>jar</type>
									<overWrite>true</overWrite>
									<outputDirectory>${project.build.directory}/hadoop-test</outputDirectory>
									<includes>**/*</includes>
								</artifactItem>
							</artifactItems>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>true</overWriteSnapshots>
						</configuration>
					</execution>
					<execution>
						<phase>compile</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<silent>true</silent>
							<outputDirectory>${project.build.directory}/lib</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- PLEASE DO NOT REMOVE! NEEDED to "PACKAGE" ANTLR RUNTIME INTO SYSTEMDS.JAR -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>2.3</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<artifactSet>
								<includes>
									<include>org.apache.wink:wink-json4j:*</include>
									<include>org.antlr:antlr4-runtime:*</include>
								</includes>
							</artifactSet>
							<transformers>
								<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<mainClass>org.apache.sysds.api.DMLScript</mainClass>
								</transformer>
								<transformer implementation="org.apache.maven.plugins.shade.resource.ApacheLicenseResourceTransformer"></transformer>
								<transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
									<resource>META-INF/LICENSE</resource>
									<file>src/assembly/bin/LICENSE</file>
								</transformer>
								<transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
									<resource>META-INF/NOTICE</resource>
									<file>NOTICE</file>
								</transformer>
							</transformers>
							<createDependencyReducedPom>false</createDependencyReducedPom>
						</configuration>
					</execution>
				</executions>
				<configuration>
					<!-- Include signature files so that recent versions of Java will run
						the resulting jar without complaining about "Invalid signature file digest
						for Manifest main attributes".
						Furthermore, the excluded notice and license files will be explicitly
						added by the resource transformers above -->
					<filters>
						<filter>
							<artifact>*:*</artifact>
							<excludes>
								<exclude>META-INF/*.SF</exclude>
								<exclude>META-INF/*.DSA</exclude>
								<exclude>META-INF/*.RSA</exclude>
								<exclude>META-INF/LICENSE</exclude>
								<exclude>META-INF/NOTICE</exclude>
							</excludes>
						</filter>
					</filters>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.1</version> <!--$NO-MVN-MAN-VER$-->
				<configuration>
					<source>${java.level}</source>
					<target>${java.level}</target>
					<compilerArgs>
						<arg>--add-modules=jdk.incubator.vector</arg>
					</compilerArgs>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-resources</id>
						<phase>compile</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<resources>
								<resource>
									<directory>${basedir}/src/test/config/hadoop_bin_windows/bin</directory>
									<filtering>false</filtering>
									<includes>
										<include>*.*</include>
									</includes>
								</resource>
							</resources>
							<outputDirectory>${basedir}/target/lib/hadoop/bin</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.antlr</groupId>
				<artifactId>antlr4-maven-plugin</artifactId>
				<configuration>
					<sourceDirectory>${basedir}/src/main/java</sourceDirectory>
					<outputDirectory>${basedir}/src/main/java</outputDirectory>
				</configuration>
				<version>${antlr.version}</version>
				<executions>
					<execution>
						<id>antlr</id>
						<goals>
							<goal>antlr4</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<!-- unit tests -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>3.0.0-M5</version>
				<configuration>
					<skipTests>${maven.test.skip}</skipTests>
					<parallel>${test-parallel}</parallel>
					<threadCount>${test-threadCount}</threadCount>
					<!-- 1C means the number of threads times 1 possible maximum forks for testing-->
					<forkCount>${test-forkCount}</forkCount>
					<reuseForks>false</reuseForks>
					<reportFormat>brief</reportFormat>
					<trimStackTrace>true</trimStackTrace>
					<rerunFailingTestsCount>${rerun.failing.tests.count}</rerunFailingTestsCount>
					<argLine>--add-modules=jdk.incubator.vector</argLine>
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-clean-plugin</artifactId>
				<executions>
					<execution>
						<id>clean-original-jar</id>
						<phase>package</phase>
						<goals>
							<goal>clean</goal>
						</goals>
						<configuration>
							<excludeDefaultDirectories>true</excludeDefaultDirectories>
							<filesets>
								<fileset>
									<directory>${project.build.directory}</directory>
									<includes>
										<include>original-*.jar</include>
									</includes>
								</fileset>
							</filesets>
						</configuration>
					</execution>
					<execution>
						<!-- remove antlr tokens files during initialize phase so antlr4 -->
						<!-- plugin can regenerate them during generate-sources phase -->
						<!-- <id>remove-antlr-tokens-files</id>
						<phase>initialize</phase>
						<goals>
							<goal>clean</goal>
						</goals>
						<configuration>
							<filesets>
								<fileset>
									<directory>src/main/java</directory>
									<includes>
										<include>*.tokens</include>
									</includes>
								</fileset>
							</filesets>
						</configuration> -->
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<id>copy</id>
						<phase>package</phase>
						<configuration>
							<target name="copy and rename JAR">
								<copy file="${project.build.directory}/${project.artifactId}-${project.version}.jar" tofile="${project.build.directory}/SystemDS.jar" />
							</target>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.8.7</version>
				<configuration>
					<includes>
						<include>${jacoco.include}</include>
					</includes>
				</configuration>
				<executions>
					<execution>
						<id>default-prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>generate-code-coverage-report</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.eluder.coveralls</groupId>
				<artifactId>coveralls-maven-plugin</artifactId>
				<version>4.3.0</version>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>3.2.0</version>
				<configuration>
					<quiet>true</quiet>
					<!-- Skip java docs creation if not explicitly asked, to create use -P distribution-->
					<skip>true</skip>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>properties-maven-plugin</artifactId>
				<version>1.0.0</version>
				<executions>
					<execution>
						<phase>generate-resources</phase>
						<goals>
							<goal>write-project-properties</goal>
						</goals>
						<configuration>
							<outputFile>${project.build.testOutputDirectory}/my.properties</outputFile>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>windows-x86_64</id>
			<activation>
				<os>
					<family>windows</family>
					<arch>amd64</arch>
				</os>
			</activation>
			<properties>
				<jcuda.os>windows</jcuda.os>
				<jcuda.arch>x86_64</jcuda.arch>
			</properties>
		</profile>
		<profile>
			<id>linux-x86_64</id>
			<activation>
				<os>
					<family>unix</family>
					<arch>amd64</arch>
				</os>
			</activation>
			<properties>
				<jcuda.os>linux</jcuda.os>
				<jcuda.arch>x86_64</jcuda.arch>
			</properties>
		</profile>
		<profile>
			<id>apple-x86_64</id>
			<activation>
				<os>
					<family>mac</family>
					<arch>x86_64</arch>
				</os>
			</activation>
			<properties>
				<jcuda.os>apple</jcuda.os>
				<jcuda.arch>x86_64</jcuda.arch>
			</properties>
		</profile>
		<profile>
			<id>linux-ppc_64</id>
			<activation>
				<os>
					<family>unix</family>
					<arch>ppc64le</arch>
				</os>
			</activation>
			<properties>
				<jcuda.os>linux</jcuda.os>
				<jcuda.arch>ppc_64</jcuda.arch>
			</properties>
		</profile>

		<profile>
			<id>eclipse-only</id>
			<activation>
				<property>
					<name>m2e.version</name>
				</property>
			</activation>
			<build>
				<pluginManagement>
					<plugins>
						<!-- Prevent m2e warnings in Eclipse. -->
						<plugin>
							<groupId>org.eclipse.m2e</groupId>
							<artifactId>lifecycle-mapping</artifactId>
							<version>1.0.0</version>
							<configuration>
								<lifecycleMappingMetadata>
									<pluginExecutions>
										<pluginExecution>
											<pluginExecutionFilter>
												<groupId>org.apache.maven.plugins</groupId>
												<artifactId>maven-remote-resources-plugin</artifactId>
												<versionRange>[1.4,)</versionRange>
												<goals>
													<goal>process</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<ignore></ignore>
											</action>
										</pluginExecution>
										<pluginExecution>
											<pluginExecutionFilter>
												<groupId>org.apache.maven.plugins</groupId>
												<artifactId>maven-clean-plugin</artifactId>
												<versionRange>[3.0.0,)</versionRange>
												<goals>
													<goal>clean</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<ignore></ignore>
											</action>
										</pluginExecution>
										<pluginExecution>
											<pluginExecutionFilter>
												<groupId>org.apache.maven.plugins</groupId>
												<artifactId>maven-dependency-plugin</artifactId>
												<versionRange>[2.10,)</versionRange>
												<goals>
													<goal>copy-dependencies</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<ignore></ignore>
											</action>
										</pluginExecution>
									</pluginExecutions>
								</lifecycleMappingMetadata>
							</configuration>
						</plugin>
					</plugins>
				</pluginManagement>
			</build>
		</profile>

		<profile>
			<id>rat</id>
			<build>
				<defaultGoal>clean org.apache.rat:apache-rat-plugin:check</defaultGoal>
				<plugins>
					<plugin>
						<groupId>org.apache.rat</groupId>
						<artifactId>apache-rat-plugin</artifactId>
						<version>0.12</version>
						<executions>
							<execution>
								<phase>package</phase>
								<goals>
									<goal>check</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<excludes>
								<exclude>scripts/perftest/results/**</exclude>
								<exclude>scripts/perftest/temp/**</exclude>
								<exclude>.gitignore</exclude>
								<exclude>src/main/python/.gitignore</exclude>
								<exclude>.gitmodules</exclude>
								<exclude>.repository/</exclude>
								<exclude>.idea/</exclude>
								<exclude>.git</exclude>
								<exclude>.settings</exclude>
								<exclude>.classpath</exclude>
								<exclude>.project</exclude>
								<exclude>CITATION</exclude>
								<exclude>src/main/python/docs/build/**/*</exclude>
								<exclude>src/main/python/docs/source/_build/**</exclude>
								<exclude>src/main/python/generator/resources/**</exclude>
								<exclude>docs/api/**/*</exclude>
								<exclude>docs/_site/**/*</exclude>
								<exclude>docs/site/run_issues.md</exclude>
								<exclude>docs/.jekyll-cache/**/*</exclude>
								<exclude>docs/css/bootstrap.min.css</exclude>
								<exclude>docs/css/pygments-default.css</exclude>
								<exclude>docs/js/vendor/**/*</exclude>
								<exclude>**/*.lock</exclude>
								<exclude>**/*.csv</exclude>
								<exclude>**/*.ijv</exclude>
								<exclude>**/*.json</exclude>
								<exclude>**/*.libsvm</exclude>
								<exclude>**/*.mtx</exclude>
								<exclude>**/*.mtd</exclude>
								<exclude>**/*.out</exclude>
								<exclude>**/__pycache__/**</exclude>
								<exclude>**/part-*</exclude>
								<exclude>**/*.keep</exclude>
								<exclude>**/target/**</exclude>
								<exclude>**/README.md</exclude>
								<exclude>**/*.svg</exclude>
								<!-- Jupyter Notebooks -->
								<exclude>**/*.ipynb</exclude>
								<!-- Generated antlr files -->
								<exclude>src/main/java/*.tokens</exclude>
								<exclude>**/*.interp</exclude>
								<!-- Generated antlr files -->
								<exclude>src/main/java/org/apache/sysds/protobuf/*.java</exclude>
								<!-- Compiled ptx file from nvcc -->
								<exclude>src/main/cuda/kernels/SystemDS.ptx</exclude>
								<exclude>src/main/cuda/kernels/reduction.ptx</exclude>
								<!-- Test Validation files -->
								<exclude>src/test/scripts/functions/jmlc/**/*.impute</exclude>
								<exclude>src/test/scripts/functions/jmlc/**/*.map</exclude>
								<exclude>src/test/scripts/functions/jmlc/**/*.mode</exclude>
								<exclude>src/test/scripts/functions/jmlc/**/*.ndistinct</exclude>
								<exclude>src/test/scripts/functions/jmlc/**/*.node</exclude>
								<exclude>src/test/scripts/functions/jmlc/tfmtd_example/Bin/saleprice.bin</exclude>
								<exclude>src/test/scripts/functions/jmlc/tfmtd_example/Bin/sqft.bin</exclude>
								<exclude>src/test/scripts/functions/jmlc/tfmtd_example/column.names</exclude>
								<exclude>src/test/scripts/functions/jmlc/tfmtd_example/dummycoded.column.names</exclude>
								<exclude>src/test/scripts/functions/jmlc/tfmtd_example2/column.names</exclude>
								<exclude>src/test/scripts/functions/jmlc/tfmtd_frame_example/tfmtd_frame</exclude>
								<!-- csv test input not captured by *.csv -->
								<exclude>src/test/scripts/functions/io/csv/in/*/*</exclude>
								<!-- Python bindings lineage test result comparison -->
								<exclude>src/main/python/tests/lt*.txt</exclude>
								<!-- Perftest requirement file -->
								<exclude>scripts/perftest/python/requirements.txt</exclude>
								<!-- external sources -->
								<exclude>src/main/cuda/ext/**</exclude>
								<exclude>src/main/cuda/.idea/</exclude>
							</excludes>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>proton</id>
			<build>
				<plugins>
					<plugin>
						<!-- generate .java files from .proto -->
						<groupId>com.github.os72</groupId>
						<artifactId>protoc-jar-maven-plugin</artifactId>
						<version>3.11.4</version>
						<executions>
							<execution>
								<phase>generate-sources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<!-- protoc binaries to be picked up from
									  https://repo.maven.apache.org/maven2/com/google/protobuf/protoc/ -->
									<protocVersion>${protobuf.version}</protocVersion>
									<inputDirectories>
										<include>src/main/resources/protobuf</include>
									</inputDirectories>
									<outputDirectory>src/main/java</outputDirectory>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- Profile to create binary distributions. Execute with `mvn clean package
				-P distribution` -->
			<id>distribution</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<configuration>
							<tarLongFileMode>posix</tarLongFileMode>
						</configuration>
						<executions>
							<execution>
								<id>create-source-distribution</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>src/assembly/source.xml</descriptor>
									</descriptors>
								</configuration>
							</execution>
							<execution>
								<id>create-extra-jar</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>src/assembly/extra.xml</descriptor>
									</descriptors>
									<archive>
										<manifestEntries>
											<Build-Time>${maven.build.timestamp}</Build-Time>
											<Artifact-Id>${project.artifactId}-extra</Artifact-Id>
											<Version>${project.version}</Version>
										</manifestEntries>
									</archive>
								</configuration>
							</execution>
							<execution>
								<id>create-binary-distribution</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>src/assembly/bin.xml</descriptor>
									</descriptors>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<artifactId>maven-gpg-plugin</artifactId>
						<version>3.0.1</version>
						<executions>
							<execution>
								<phase>verify</phase>
								<goals>
									<goal>sign</goal>
								</goals>
								<configuration>
									<!-- This is necessary for gpg to not try to use the pinentry programs -->
									<gpgArguments>
										<arg>--pinentry-mode</arg>
										<arg>loopback</arg>
									</gpgArguments>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-remote-resources-plugin</artifactId>
						<version>1.4</version>
						<executions>
							<execution>
								<goals>
									<goal>process</goal>
								</goals>
								<configuration>
									<resourceBundles>
										<!-- Will generate META-INF/DEPENDENCIES META-INF/LICENSE META-INF/NOTICE -->
										<resourceBundle>org.apache:apache-jar-resource-bundle:1.4</resourceBundle>
									</resourceBundles>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-javadoc-plugin</artifactId>
						<version>3.2.0</version>
						<configuration>
							<!-- https://maven.apache.org/plugins/maven-javadoc-plugin/javadoc-mojo.html -->
							<excludePackageNames>*.protobuf</excludePackageNames>
							<notimestamp>true</notimestamp>
							<failOnWarnings>true</failOnWarnings>
							<quiet>true</quiet>
							<skip>false</skip>
							<show>public</show>
							<source>${java.level}</source>
						</configuration>
						<executions>
							<execution>
								<id>attach-javadocs</id>
								<goals>
									<goal>jar</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>skip-sign</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
						<configuration>
							<skip>true</skip>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<dependencies>
		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcuda</artifactId>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
			<exclusions>
				<exclusion>
					<!-- always exclude recursive fetching of native libraries -->
					<groupId>org.jcuda</groupId>
					<artifactId>jcuda-natives</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcublas</artifactId>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
			<exclusions>
				<exclusion>
					<!-- always exclude recursive fetching of native libraries -->
					<groupId>org.jcuda</groupId>
					<artifactId>jcublas-natives</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcusparse</artifactId>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
			<exclusions>
				<exclusion>
					<!-- always exclude recursive fetching of native libraries -->
					<groupId>org.jcuda</groupId>
					<artifactId>jcusparse-natives</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcusolver</artifactId>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
			<exclusions>
				<exclusion>
					<!-- always exclude recursive fetching of native libraries -->
					<groupId>org.jcuda</groupId>
					<artifactId>jcusolver-natives</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcudnn</artifactId>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
			<exclusions>
				<exclusion>
					<!-- always exclude recursive fetching of native libraries -->
					<groupId>org.jcuda</groupId>
					<artifactId>jcudnn-natives</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- for all platforms, to be included in the extra jar -->
		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcuda-natives</artifactId>
			<classifier>windows-x86_64</classifier>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
		</dependency>

		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcublas-natives</artifactId>
			<classifier>windows-x86_64</classifier>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
		</dependency>

		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcusparse-natives</artifactId>
			<classifier>windows-x86_64</classifier>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
		</dependency>

		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcusolver-natives</artifactId>
			<classifier>windows-x86_64</classifier>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
		</dependency>

		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcudnn-natives</artifactId>
			<classifier>windows-x86_64</classifier>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
		</dependency>

		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcuda-natives</artifactId>
			<classifier>linux-x86_64</classifier>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
		</dependency>

		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcublas-natives</artifactId>
			<classifier>linux-x86_64</classifier>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
		</dependency>

		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcusparse-natives</artifactId>
			<classifier>linux-x86_64</classifier>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
		</dependency>

		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcusolver-natives</artifactId>
			<classifier>linux-x86_64</classifier>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
		</dependency>

		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcudnn-natives</artifactId>
			<classifier>linux-x86_64</classifier>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
		</dependency>

		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcuda-natives</artifactId>
			<classifier>apple-x86_64</classifier>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
		</dependency>

		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcublas-natives</artifactId>
			<classifier>apple-x86_64</classifier>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
		</dependency>

		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcusparse-natives</artifactId>
			<classifier>apple-x86_64</classifier>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
		</dependency>

		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcusolver-natives</artifactId>
			<classifier>apple-x86_64</classifier>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
		</dependency>

		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcudnn-natives</artifactId>
			<classifier>apple-x86_64</classifier>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
		</dependency>

		<dependency>
			<groupId>org.apache.spark</groupId>
			<artifactId>spark-core_${scala.binary.version}</artifactId>
			<version>${spark.version}</version>
			<exclusions>
				<exclusion>
					<groupId>log4j</groupId>
					<artifactId>log4j</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-log4j12</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-reload4j</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>jul-to-slf4j</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>jcl-over-slf4j</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.apache.hadoop</groupId>
					<artifactId>hadoop-client-api</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.apache.hadoop</groupId>
					<artifactId>hadoop-client-runtime</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.apache.hadoop</groupId>
					<artifactId>hadoop-client-runtime</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.apache.spark</groupId>
			<artifactId>spark-sql_${scala.binary.version}</artifactId>
			<version>${spark.version}</version>
			<exclusions>
				<exclusion>
					<groupId>log4j</groupId>
					<artifactId>log4j</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-log4j12</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-reload4j</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.apache.spark</groupId>
			<artifactId>spark-mllib_${scala.binary.version}</artifactId>
			<version>${spark.version}</version>
			<exclusions>
				<exclusion>
					<groupId>log4j</groupId>
					<artifactId>log4j</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-log4j12</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-reload4j</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.apache.hadoop</groupId>
			<artifactId>hadoop-common</artifactId>
			<version>${hadoop.version}</version>
			<exclusions>
				<exclusion>
					<groupId>javax.servlet</groupId>
					<artifactId>servlet-api</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-reload4j</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.apache.hadoop</groupId>
			<artifactId>hadoop-hdfs</artifactId>
			<version>${hadoop.version}</version>
			<exclusions>
				<exclusion>
					<groupId>javax.servlet</groupId>
					<artifactId>servlet-api</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-log4j12</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-reload4j</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.apache.hadoop</groupId>
			<artifactId>hadoop-client</artifactId>
			<version>${hadoop.version}</version>
			<exclusions>
				<exclusion>
					<groupId>log4j</groupId>
					<artifactId>log4j</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-log4j12</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-reload4j</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>commons-logging</groupId>
			<artifactId>commons-logging</artifactId>
			<version>1.1.3</version>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-log4j12</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-reload4j</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-math3</artifactId>
			<version>3.4.1</version>
		</dependency>

		<dependency>
			<groupId>org.apache.wink</groupId>
			<artifactId>wink-json4j</artifactId>
			<version>1.4</version>
		</dependency>

		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.12.6.1</version>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.1</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.openjdk.jol</groupId>
			<artifactId>jol-core</artifactId>
			<version>0.10</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<!--Used for annotations in tests to execute tests in thread safe manner-->
			<groupId>com.github.stephenc.jcip</groupId>
			<artifactId>jcip-annotations</artifactId>
			<version>1.0-1</version>
			<scope>test</scope>
		</dependency>

		<!-- fast java compiler for codegen, consistent version w/ spark -->
		<dependency>
			<groupId>org.codehaus.janino</groupId>
			<artifactId>janino</artifactId>
			<version>3.0.16</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.antlr</groupId>
			<artifactId>antlr4</artifactId>
			<version>${antlr.version}</version>
			<scope>provided</scope>
			<exclusions>
				<exclusion>
					<artifactId>antlr-runtime</artifactId>
					<groupId>org.antlr</groupId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.antlr</groupId>
			<artifactId>antlr4-runtime</artifactId>
			<version>${antlr.version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.derby</groupId>
			<artifactId>derby</artifactId>
			<version>10.14.2.0</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>io.netty</groupId>
			<artifactId>netty-all</artifactId>
			<version>4.1.68.Final</version>
			<scope>provided</scope>
			<exclusions>
				<exclusion>
					<groupId>org.apache.logging.log4j</groupId>
					<artifactId>log4j-api</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.apache.logging.log4j</groupId>
					<artifactId>log4j-1.2-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>net.sf.py4j</groupId>
			<artifactId>py4j</artifactId>
			<version>0.10.9</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-javadoc-plugin -->
		<dependency>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-javadoc-plugin</artifactId>
			<version>3.2.0</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-gpg-plugin -->
		<dependency>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-gpg-plugin</artifactId>
			<version>1.6</version>
		</dependency>

		<!-- https://developers.google.com/protocol-buffers/docs/reference/java -->
		<dependency>
			<groupId>com.google.protobuf</groupId>
			<artifactId>protobuf-java</artifactId>
			<version>${protobuf.version}</version>
		</dependency>

		<dependency>
			<groupId>com.google.protobuf</groupId>
			<artifactId>protobuf-java-util</artifactId>
			<version>${protobuf.version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-assembly-plugin</artifactId>
			<version>3.3.0</version>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jul-to-slf4j</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-reload4j</artifactId>
			<version>${slf4j.version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
			<version>${log4j.version}</version>
		</dependency>
	</dependencies>
</project>