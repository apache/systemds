#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

# Tests the implementations by comparing their results agains an expected result.

source("../shapley-permutation-opt.dml") as SPO
source("../shapley-permutation.dml") as SP


#prepare_mask_for_permutaion
perm = matrix("3 1 2", cols=3, rows=1)
pm("perm", perm)
a = SPO::prepare_mask_for_permutaion(perm)
b = SP::prepare_mask_for_permutaion(perm)
r = matrix("0 0 0 0 0 1 1 0 1 1 1 1 1 1 0 0 1 0", rows=6, cols=3)
assertEqual("prepare_mask_for_permutaion", a, b, r)


#prepare_samples_from_mask
x = matrix("10 20", rows=1, cols=2)
x_bg = matrix("11 21 31 41", rows=2, cols=2)
mask = matrix("1 0 0 1", rows=2, cols=2)
a = SPO::prepare_samples_from_mask(x, mask, x_bg)
b = SP::prepare_samples_from_mask(x, mask, x_bg)
r = matrix("10 21 10 41 11 20 31 20", rows=4, cols=2)
assertEqual("prepare_samples_from_mask", a, b, r)


#compute_means_from_predictions
p = matrix("2 2 3 3 4 4", rows=6, cols=1)
a = SPO::compute_means_from_predictions(p, 2)
b = SP::compute_means_from_predictions(p, 2)
r = matrix("2 3 4", rows=3, cols=1)
assertEqual("compute_means_from_predictions", a, b, r)


#compute_phis_from_prediction_means
permutation = matrix("2 3 4 1 5", cols=5, rows=1)
P_perm = matrix("10 21 22 23 24 100 34 33 32 31", rows=10, cols=1)
a = SPO::compute_phis_from_prediction_means(P_perm, permutation)
#transpose and average, since return format was changed.
a = t(rowSums(a))
b = SP::compute_phis_from_prediction_means(P_perm, permutation)
r = matrix("2 77 2 2 97", rows=1, cols=5)
assertEqual("compute_phis_from_prediction_means", a, b, r)

assertEqual = function(String comp_name, Matrix[Double] a, Matrix[Double] b, Matrix[Double] r){
  print("--> Test: "+comp_name)
  pm("A:",a)
  pm("B:",b)
  pm("Expected Result:",r)
  assert(nrow(a) == nrow(r))
  assert(nrow(b) == nrow(r))
  assert(ncol(a) == ncol(r))
  assert(ncol(b) == ncol(r))
  e = a == b
  f = b == r
  assert(prod(e)*prod(f)==1)
  print("A and B are equal to the expected Result.\n=======================================\n\n")
}


pm = function(String name, Matrix[Double] m){
  print(name+":\n"+toString(m))
}