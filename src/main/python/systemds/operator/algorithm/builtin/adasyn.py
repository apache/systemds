# -------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# -------------------------------------------------------------

# Autogenerated By   : src/main/python/generator/generator.py
# Autogenerated From : scripts/builtin/adasyn.dml

from typing import Dict, Iterable

from systemds.operator import OperationNode, Matrix, Frame, List, MultiReturn, Scalar
from systemds.utils.consts import VALID_INPUT_TYPES


def adasyn(X: Matrix,
           Y: Matrix,
           **kwargs: Dict[str, VALID_INPUT_TYPES]):
    """
     Builtin function for handing class imbalance using Adaptive Synthetic Sampling (ADASYN)
     by Haibo He et. al. In International Joint Conference on Neural Networks (2008). 1322-1328
    
    
    
    :param X: Feature matrix [shape: n-by-m]
    :param Y: Class labels [shape: n-by-1]
    :param k: Number of nearest neighbors
    :param beta: Desired balance level after generation of synthetic data [0, 1]
    :param dth: Distribution threshold
    :param seed: Seed for randomized data point selection
    :return: Feature matrix of n original rows followed by G = (ml-ms)*beta synthetic rows
    :return: Class labels aligned with output X
    """

    params_dict = {'X': X, 'Y': Y}
    params_dict.update(kwargs)
    
    vX_0 = Matrix(X.sds_context, '')
    vX_1 = Matrix(X.sds_context, '')
    output_nodes = [vX_0, vX_1, ]

    op = MultiReturn(X.sds_context, 'adasyn', output_nodes, named_input_nodes=params_dict)

    vX_0._unnamed_input_nodes = [op]
    vX_1._unnamed_input_nodes = [op]

    return op
