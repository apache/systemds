# -------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# -------------------------------------------------------------

# Autogenerated By   : src/main/python/generator/generator.py
# Autogenerated From : scripts/builtin/denialConstraints.dml

from typing import Dict, Iterable

from systemds.operator import OperationNode, Matrix, Frame, List, MultiReturn, Scalar
from systemds.script_building.dag import OutputType
from systemds.utils.consts import VALID_INPUT_TYPES


def denialConstraints(dataFrame: Frame,
                      constraintsFrame: Frame):
    """
    :param dataFrame: frame which columns represent the variables of the data and the rows correspond
    :param to: or instances.
    :param Recommended: a column indexing the instances from 1 to N (N=number of instances).
    :param constraintsFrame: frame with fixed columns and each row representing one constraint.
    :param ie: value of the variable 1 in instance 1 is lower/higher than the value of variable 1 in instance 2, 
    :param then: of of variable 2 in instance 2 can't be lower/higher than the value of variable 2 in instance 2.
    :param in: of instanceCompare
    :param rank: yrs.service   sex      salary
    :param 1: 19              18            Male     139750
    :param 2: 20              16            Male     173200
    :param 3: 3               3             Male     79750.56
    :param 4: 45              39            Male     115000
    :param 5: 40              40            Male     141500
    :param 6: 6               6             Male     97000
    :param 7: 30              23            Male     175000
    :param 8: 45              45            Male     147765
    :param 9: 21              20            Male     119250
    :param 10: 18              18            Female   129000
    :param 11: 12              8             Male     119800
    :param 12: 7               2             Male     79800
    :param 13: 1               1             Male     77700
    :param 1: yrs.since.phd  <          yrs.service
    :param 2: rank                Prof           yrs.service    ><         salary
    :param 3: salary         =          78182
    :param 4: discipline          B              yrs.service    >          yrs.since.phd
    :return: 'OperationNode' containing shows the indexes of dataframe that are wrong. & shows the index of the denial constraint that is fulfilled & no wrong instances to show (0 constrains fulfilled) --> wronginstances=matrix(0,1,2) 
    """
    params_dict = {'dataFrame': dataFrame, 'constraintsFrame': constraintsFrame}
    return Matrix(dataFrame.sds_context,
        'denialConstraints',
        named_input_nodes=params_dict)
