# -------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# -------------------------------------------------------------

# Autogenerated By   : src/main/python/generator/generator.py
# Autogenerated From : scripts/builtin/ema.dml

from typing import Dict, Iterable

from systemds.operator import OperationNode, Matrix, Frame, List, MultiReturn, Scalar
from systemds.script_building.dag import OutputType
from systemds.utils.consts import VALID_INPUT_TYPES


def ema(X: Frame,
        search_iterations: int,
        mode: str,
        freq: int,
        alpha: float,
        beta: float,
        gamma: float):
    """
     This function imputes values with exponential moving average (single, double or triple).
    
    
    
    :param X: Frame that contains time series data that needs to be imputed
        search_iterations	Integer	--	Budget iterations for parameter optimization,
        used if parameters weren't set
    :param mode: Type of EMA method. Either "single", "double" or "triple"
    :param freq: Seasonality when using triple EMA.
    :param alpha: alpha- value for EMA
    :param beta: beta- value for EMA
    :param gamma: gamma- value for EMA
    :return: Frame with EMA results
    """

    params_dict = {'X': X, 'search_iterations': search_iterations, 'mode': mode, 'freq': freq, 'alpha': alpha, 'beta': beta, 'gamma': gamma}
    return Matrix(X.sds_context,
        'ema',
        named_input_nodes=params_dict)
