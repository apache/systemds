# -------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# -------------------------------------------------------------

# Autogenerated By   : src/main/python/generator/generator.py
# Autogenerated From : scripts/builtin/img_crop_linearized.dml

from typing import Dict, Iterable

from systemds.operator import OperationNode, Matrix, Frame, List, MultiReturn, Scalar
from systemds.utils.consts import VALID_INPUT_TYPES


def img_crop_linearized(img: Matrix,
                        w: int,
                        h: int,
                        offsetX: int,
                        offsetY: int,
                        sW: int,
                        sH: int):
    """
     The img_crop_linearized cuts out a rectangular section of multiple linearized images.
    
    
    
    :param img: Linearized input images as 2D matrix
    :param w: The width of the subregion required
    :param h: The height of the subregion required
    :param offsetX: The horizontal offset for the center of the crop region
    :param offsetY: The vertical offset for the center of the crop region
    :param sW: Width of a single image
    :param sH: Height of a single image
    :return: Cropped images as linearized 2D matrix
    """

    params_dict = {'img': img, 'w': w, 'h': h, 'offsetX': offsetX, 'offsetY': offsetY, 'sW': sW, 'sH': sH}
    return Matrix(img.sds_context,
        'img_crop_linearized',
        named_input_nodes=params_dict)
