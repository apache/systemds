# -------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# -------------------------------------------------------------

# Autogenerated By   : src/main/python/generator/generator.py
# Autogenerated From : scripts/builtin/img_sample_pairing.dml

from typing import Dict, Iterable

from systemds.operator import OperationNode, Matrix, Frame, List, MultiReturn, Scalar
from systemds.utils.consts import VALID_INPUT_TYPES


def img_sample_pairing(img_in1: Matrix,
                       img_in2: Matrix,
                       weight: float):
    """
     The image sample pairing function blends two images together.
    
     .. code-block:: python
    
       >>> import numpy as np
       >>> from systemds.context import SystemDSContext
       >>> from systemds.operator.algorithm import img_sample_pairing
       >>> 
       >>> with SystemDSContext() as sds:
       ...     img_in1 = sds.from_numpy(
       ...         np.array([[ 10., 20., 30.],
       ...                   [ 40., 50., 60.],
       ...                   [ 70., 80., 90.]], dtype=np.float32)
       ...     )
       ...     img_in2 = sds.from_numpy(
       ...         np.array([[ 30., 40., 50.],
       ...                   [ 60., 70., 80.],
       ...                   [ 90., 100., 110.]], dtype=np.float32)
       ...     )
       ...     result_img = img_sample_pairing(img_in1, img_in2, 0.5).compute()
       ...     print(result_img)
       [[ 20.  30.  40.]
        [ 50.  60.  70.]
        [ 80.  90. 100.]]
    
    
    
    
    :param img_in1: First input image as 2D matrix with top left corner at [1, 1]
    :param img_in2: Second input image as 2D matrix with top left corner at [1, 1]
    :param weight: The weight given to the second image.
        0 means only img_in1, 1 means only img_in2 will be visible
    :return: Output image
    """

    params_dict = {'img_in1': img_in1, 'img_in2': img_in2, 'weight': weight}
    return Matrix(img_in1.sds_context,
        'img_sample_pairing',
        named_input_nodes=params_dict)
