# -------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# -------------------------------------------------------------

# Autogenerated By   : src/main/python/generator/generator.py
# Autogenerated From : scripts/builtin/img_translate_linearized.dml

from typing import Dict, Iterable

from systemds.operator import OperationNode, Matrix, Frame, List, MultiReturn, Scalar
from systemds.utils.consts import VALID_INPUT_TYPES


def img_translate_linearized(img_in: Matrix,
                             offset_x: float,
                             offset_y: float,
                             out_w: int,
                             out_h: int,
                             fill_value: float,
                             o_w: int,
                             o_h: int):
    """
     This function has  the same functionality with img_translate but it handles multiple images at
     the same time. Each row of the input and output matrix represents a linearized image/matrix
     It translates the image and Optionally resizes the image (without scaling).
    
     .. code-block:: python
    
       >>> import numpy as np
       >>> from systemds.context import SystemDSContext
       >>> from systemds.operator.algorithm import img_translate_linearized
       >>> 
       >>> with SystemDSContext() as sds:
       ...     img = sds.from_numpy(
       ...         np.array([[ 10., 20., 30.,
       ...                     40., 50., 60.,
       ...                     70., 80., 90. ]], dtype=np.float32)
       ...     )
       ...     result_img = img_translate_linearized(img, 1., 1., 3, 3, 255.0, 3, 3).compute()
       ...     print(result_img.reshape(3, 3))
       [[255. 255. 255.]
        [255.  10.  20.]
        [255.  40.  50.]]
    
    
    
    
    :param img_in: Input images as linearized 2D matrix with top left corner at [1, 1] (every row represents a linearized matrix/image)
    :param offset_x: The distance to move the image in x direction
    :param offset_y: The distance to move the image in y direction
    :param out_w: Width of the output image
    :param out_h: Height of the output image
    :param fill_value: The background of the image
    :param o_w: Width of the original 2D images
    :param o_h: Height of the original 2D images
    :return: Output matrix/image  (every row represents a linearized matrix/image)
    """

    params_dict = {'img_in': img_in, 'offset_x': offset_x, 'offset_y': offset_y, 'out_w': out_w, 'out_h': out_h, 'fill_value': fill_value, 'o_w': o_w, 'o_h': o_h}
    return Matrix(img_in.sds_context,
        'img_translate_linearized',
        named_input_nodes=params_dict)
