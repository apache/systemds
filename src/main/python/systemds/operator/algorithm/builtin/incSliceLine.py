# -------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# -------------------------------------------------------------

# Autogenerated By   : src/main/python/generator/generator.py
# Autogenerated From : scripts/builtin/incSliceLine.dml

from typing import Dict, Iterable

from systemds.operator import OperationNode, Matrix, Frame, List, MultiReturn, Scalar
from systemds.utils.consts import VALID_INPUT_TYPES


def incSliceLine(addedX: Matrix,
                 addedE: Matrix,
                 **kwargs: Dict[str, VALID_INPUT_TYPES]):
    """
     This builtin function implements incSliceLine, a linear-algebra-based
     ML model debugging technique for finding the top-k data slices where
     a trained models performs significantly worse than on the overall
     dataset. IncSliceLine is designed for scenarios in which training data is updated incrementally.
     For a detailed description of the SliceLine algorithm and experimental results, see:
     Svetlana Sagadeeva, Matthias Boehm: SliceLine: Fast, Linear-Algebra-based Slice Finding for ML Model Debugging.(SIGMOD 2021)
    
    
    
    :param addedX: Feature matrix of added tuples in recoded/binned representation
    :param oldX: All-comprising feature matrix of previous runs (except for current run) in recoded/binned representation
    :param oldE: All-comprising error vector of trained model for old tuples
    :param addedE: Error vector of trained model for added tuples
    :param indicesRemoved: Indices of tuples that were removed from the previous dataset (oldX)
    :param k: Number of subsets required
    :param maxL: maximum level L (conjunctions of L predicates), 0 unlimited
    :param minSup: minimum support (min number of rows per slice)
    :param alpha: weight [0,1]: 0 only size, 1 only error
    :param tpEval: flag for task-parallel slice evaluation,
        otherwise data-parallel
    :param tpBlksz: block size for task-parallel execution (num slices)
    :param selFeat: flag for removing one-hot-encoded features that don't satisfy
        the initial minimum-support constraint and/or have zero error
    :param verbose: flag for verbose debug output
    :param params: list of parameters to ensure consistent parameters through all runs (for incremental updates)
    :param prevFoffb: previous feature offsets (for incremental updates)
    :param prevFoffe: previous feature offsets (for incremental updates)
    :param prevLattice: previous lattice (for incremental updates)
    :param metaPrevLattice: previous meta information for lattice encoding (for incremental updates)
    :param prevStats: previous statistics whole lattice (for incremental updates)
    :param prevTK: previous top-k slices (for incremental updates)
    :param prevTKC: previous top-k scores (for incremental updates)
    :param encodeLat: flag for encoding output lattice for less memory consumption
    :param pruningStrat: flag for disabling certain pruning strategies
        (0 all, 1 all exact (score and size), 2 no score, 3 no size, 4 none)
    :return: top-k slices (k x ncol(totalX) if successful)
    :return: score, size, error of slices (k x 3)
    :return: debug matrix, populated with enumeration stats if verbose
    :return: lattice matrix
    :return: meta information for lattice encoding
    :return: statistics matrix for all slices in L
    :return: feature matrix consisting of oldX, addedX and without removedX for next run
    :return: error vector consisting of oldE, addedE and without removedE for next run
    :return: feature offsets for next run
    :return: feature offsets for next run
    :return: list of parameters for next run
    """

    params_dict = {'addedX': addedX, 'addedE': addedE}
    params_dict.update(kwargs)
    
    vX_0 = Matrix(addedX.sds_context, '')
    vX_1 = Matrix(addedX.sds_context, '')
    vX_2 = Matrix(addedX.sds_context, '')
    vX_3 = List(addedX.sds_context, '')
    vX_4 = List(addedX.sds_context, '')
    vX_5 = List(addedX.sds_context, '')
    vX_6 = Matrix(addedX.sds_context, '')
    vX_7 = Matrix(addedX.sds_context, '')
    vX_8 = Matrix(addedX.sds_context, '')
    vX_9 = Matrix(addedX.sds_context, '')
    vX_10 = List(addedX.sds_context, '')
    output_nodes = [vX_0, vX_1, vX_2, vX_3, vX_4, vX_5, vX_6, vX_7, vX_8, vX_9, vX_10, ]

    op = MultiReturn(addedX.sds_context, 'incSliceLine', output_nodes, named_input_nodes=params_dict)

    vX_0._unnamed_input_nodes = [op]
    vX_1._unnamed_input_nodes = [op]
    vX_2._unnamed_input_nodes = [op]
    vX_3._unnamed_input_nodes = [op]
    vX_4._unnamed_input_nodes = [op]
    vX_5._unnamed_input_nodes = [op]
    vX_6._unnamed_input_nodes = [op]
    vX_7._unnamed_input_nodes = [op]
    vX_8._unnamed_input_nodes = [op]
    vX_9._unnamed_input_nodes = [op]
    vX_10._unnamed_input_nodes = [op]

    return op
