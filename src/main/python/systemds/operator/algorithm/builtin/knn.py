# -------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# -------------------------------------------------------------

# Autogenerated By   : src/main/python/generator/generator.py
# Autogenerated From : scripts/builtin/knn.dml

from typing import Dict, Iterable

from systemds.operator import OperationNode, Matrix, Frame, List, MultiReturn, Scalar
from systemds.utils.consts import VALID_INPUT_TYPES


def knn(Train: Matrix,
        Test: Matrix,
        CL: Matrix,
        initSelectFeature: Matrix,
        **kwargs: Dict[str, VALID_INPUT_TYPES]):
    """
     This script implements KNN (K Nearest Neighbor) algorithm.
    
    
    
    :param Train: The input matrix as features
    :param Test: The input matrix for nearest neighbor search
    :param CL: The input matrix as target
    :param ctypes: The target type of matrix CL whether
        columns in CL are continuous ( =1 ) or
        categorical ( =2 ) or not specified ( =0 )
    :param transCont: Option flag for continuous feature transformed to [-1,1]:
        FALSE = do not transform continuous variable;
        TRUE = transform continuous variable;
    :param k: k value for KNN, ignore if selectK enable
    :param selectK: Use k selection algorithm to estimate k (TRUE means yes)
    :param minK: Min k value(  available if selectK = 1 )
    :param maxK: Max k value(  available if selectK = 1 )
    :param selectFeature: Use feature selection algorithm to select feature (TRUE means yes)
    :param maxFeatures: Max feature selection
    :param interval: Interval value for K selecting (  available if selectK = 1 )
    :param featureImportance: Use feature importance algorithm to estimate each feature
        (TRUE means yes)
    :param predictCont: Continuous target predict function: mean(=0) or median(=1)
    :param initSelectFeature: initial feature selection matrix
    :return: Applied clusters to X
    :return: Cluster matrix
    :return: Feature importance value
    """

    params_dict = {'Train': Train, 'Test': Test, 'CL': CL, 'initSelectFeature': initSelectFeature}
    params_dict.update(kwargs)
    
    vX_0 = Matrix(Train.sds_context, '')
    vX_1 = Matrix(Train.sds_context, '')
    vX_2 = Matrix(Train.sds_context, '')
    output_nodes = [vX_0, vX_1, vX_2, ]

    op = MultiReturn(Train.sds_context, 'knn', output_nodes, named_input_nodes=params_dict)

    vX_0._unnamed_input_nodes = [op]
    vX_1._unnamed_input_nodes = [op]
    vX_2._unnamed_input_nodes = [op]

    return op
