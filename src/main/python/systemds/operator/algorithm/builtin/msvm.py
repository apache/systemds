# -------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# -------------------------------------------------------------

# Autogenerated By   : src/main/python/generator/generator.py
# Autogenerated From : scripts/builtin/msvm.dml

from typing import Dict, Iterable

from systemds.operator import OperationNode, Matrix, Frame, List, MultiReturn, Scalar
from systemds.script_building.dag import OutputType
from systemds.utils.consts import VALID_INPUT_TYPES


def msvm(X: Matrix,
         Y: Matrix,
         **kwargs: Dict[str, VALID_INPUT_TYPES]):
    """
     This builtin function implements a multi-class Support Vector Machine (SVM)
     with squared slack variables. The trained model comprises #classes
     one-against-the-rest binary-class l2svm classification models.
    
    
    
    :param X: Feature matrix X (shape: m x n)
    :param Y: Label vector y of class labels (shape: m x 1),
        where max(Y) is assumed to be the number of classes
    :param intercept: Indicator if a bias column should be added to X and the model
    :param epsilon: Tolerance for early termination if the reduction of objective
        function is less than epsilon times the initial objective
    :param reg: Regularization parameter (lambda) for L2 regularization
    :param maxIterations: Maximum number of conjugate gradient (outer l2svm) iterations
    :param verbose: Indicator if training details should be printed
    :return: Trained model/weights (shape: n x max(Y), w/ intercept: n+1)
    """

    params_dict = {'X': X, 'Y': Y}
    params_dict.update(kwargs)
    return Matrix(X.sds_context,
        'msvm',
        named_input_nodes=params_dict)
