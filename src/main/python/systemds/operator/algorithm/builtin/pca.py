# -------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# -------------------------------------------------------------

# Autogenerated By   : src/main/python/generator/generator.py
# Autogenerated From : scripts/builtin/pca.dml

from typing import Dict, Iterable

from systemds.operator import OperationNode, Matrix, Frame, List, MultiReturn, Scalar
from systemds.script_building.dag import OutputType
from systemds.utils.consts import VALID_INPUT_TYPES


def pca(X: Matrix,
        **kwargs: Dict[str, VALID_INPUT_TYPES]):
    """
     This builtin defines PCA that is a technique typically used to
     reduce the number of dimensions of a matrix.
     This implementation is based on calculating eigenvectors on
     the covariance matrix of the input.
    
     An example of calling in DML:
    
     .. code-block::
    
       data = read($1)
       [data_reduced, Components] = pca(data=data, K=4, onlyComponents=TRUE)
       print(Components)
    
    
     An example in a ML pipeline containing PCA:
    
     .. code-block::
    
       X = read($1)
       [X_reduced, Components] = pca(data=X, K=4)
       Y = read($2)
       bias = l2svm(X=X, Y=Y)
       X_test = read($3)
       [y_predict_normal, Y_predict_rounded] = l2svmPredict(X=X_test, W=bias)
       write($5, Y_predict_rounded)
    
    
    
    
    :param X: Input feature matrix
    :param K: Number of components returned
    :param center: Indicates whether or not to center the feature matrix
    :param scale: Indicates whether or not to scale the feature matrix
    :param onlyComponents: Indicate if only the components should be calculated and returned
        not the application of the components on X
    :return: Output feature matrix with K columns
    :return: Output dominant eigen vectors sorted by influence
    :return: The column means of the input, subtracted to construct the PCA
    :return: The scaling of the values, to make each dimension same size.
    """

    params_dict = {'X': X}
    params_dict.update(kwargs)
    
    vX_0 = Matrix(X.sds_context, '')
    vX_1 = Matrix(X.sds_context, '')
    vX_2 = Matrix(X.sds_context, '')
    vX_3 = Matrix(X.sds_context, '')
    output_nodes = [vX_0, vX_1, vX_2, vX_3, ]

    op = MultiReturn(X.sds_context, 'pca', output_nodes, named_input_nodes=params_dict)

    vX_0._unnamed_input_nodes = [op]
    vX_1._unnamed_input_nodes = [op]
    vX_2._unnamed_input_nodes = [op]
    vX_3._unnamed_input_nodes = [op]

    return op
