#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------
# INPUT:
# -input:   linearized picture with pixel_width*pixel_height columns
#           and number of pictures as rows (one image per row)
# -width:   pixel_width*pixel_height of the original images
# -height:  number ob images
# -out_w:   width of the output images
# -out_h:   height of  the output images
# -a:       entry at [0,0] of the affine matrix
# -b:       entry at [0,1] of the affine matrix
# -c:       entry at [0,2] of the affine matrix
# -d:       entry at [1,0] of the affine matrix
# -e:       entry at [1,1] of the affine matrix
# -f:       entry at [1,2] of the affine matrix
# -fill_value   colorvalue for empty spaces
#               after transformation
# -s_cols:  original number of pixel width
#           before linearization
# -s_rows:  original number of pixel height
#           before linearization
#-------------------------------------------------------------
# OUTPUT:
# -img_out: transformed image
#-------------------------------------------------------------

input = read($in_file)
width = ifdef($width, 512)
height = ifdef($height, 512)
out_w = ifdef($out_w, 512)
out_h = ifdef($out_h, 512)
a = ifdef($a, 2)
b = ifdef($b, 1)
c = ifdef($c, 1)
d = ifdef($d, 0)
e = ifdef($e, 1)
f = ifdef($f, 0)
fill_value = ifdef($fill_value, 0)
s_cols = ifdef($s_cols, 512)
s_rows = ifdef($s_rows, 512)

#method using dml scripts
if(FALSE){
    input = matrix(input, rows=height, cols=width)
    transformed = img_transform_linearized(input, out_w, out_h, a, b, c, d, e, f, fill_value, s_cols, s_rows)
    write(transformed, $out_file)
#method using builtin function
}else{
    affineMat = matrix(0,rows=3, cols=3)
    affineMat[1,1] = a
    affineMat[1,2] = b
    affineMat[1,3] = c
    affineMat[2,1] = d
    affineMat[2,2] = e
    affineMat[2,3] = f
    affineMat[3,3] = 1
    dimMat = matrix(0,rows=2, cols=2)
    dimMat[1,1] = s_cols
    dimMat[1,2] = s_rows
    dimMat[2,1] = out_w
    dimMat[2,2] = out_h

    [zMat, isFillable] = img_transform_matrix(affineMat, dimMat)

    if(as.logical(as.scalar(isFillable))){
        ys=cbind(input, matrix(fill_value,nrow(input), 1))
    }else{
        ys = input
    }

    output = ys%*%zMat
    img_out = matrix(output, rows=nrow(input), cols=out_w*out_h)
    write(img_out, $out_file)
}
