#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

dataset = read('../../../resources/datasets/wine/winequality-white.csv', format="csv")

X = dataset[1:nrow(dataset), 1:11]
y = dataset[,12]
R = matrix("1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0", rows=1, cols=ncol(X))

M = xgboost(X = X, y = y, R = R)
# P = xgboostPredict(X = X, M = M)

printMatrix(X, 'predict')
# write(M, $6);

printMatrix = function(Matrix[Double] m, string name) return() {
    print("--------------------------------------")
    print(":: [MATRIX] " + name + "  (col:" + ncol(m) + ",row:" + nrow(m) + ")")

    if(nrow(m) != 0 & ncol(m) != 0)
    {
        col_string = ":::::::"
        for(col in 1:ncol(m)) {
            if(col < 10)
                col_string = col_string + ":::(" + toString(col) + ")::::"
            else
                col_string = col_string + ":::(" + toString(col) + "):::"
        }
        print(col_string)
        for(row in 1:nrow(m)) {

            print_string = ":(" + row + ")     "
            for(col in 1:ncol(m)) {
                curr_value = m[row,col]
                if(as.scalar(curr_value) == 'NaN')
                    print_string = print_string + toString(curr_value, linesep="       ", sep=",")
                else if(as.scalar(curr_value) < 10)
                    print_string = print_string + toString(curr_value, linesep="     ", sep=",")
                else if(as.scalar(curr_value) < 100)
                    print_string = print_string + toString(curr_value, linesep="    ", sep=",")
                else if(as.scalar(curr_value) < 1000)
                    print_string = print_string + toString(curr_value, linesep="   ", sep=",")
                else if(as.scalar(curr_value) < 10000)
                    print_string = print_string + toString(curr_value, linesep="  ", sep=",")
                else
                    print_string = print_string + toString(curr_value, linesep=" ", sep=",")
            }
            print(print_string)
        }
    }
    print("--------------------------------------")
}
