#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

X = federated(addresses=list($in_X1, $in_X2, $in_X3, $in_X4),
        ranges=list(list(0, 0), list($rows/4, $cols), list($rows/4, 0), list(2*$rows/4, $cols),
    		list(2*$rows/4, 0), list(3*$rows/4, $cols), list(3*$rows/4, 0), list($rows, $cols)));

m = nrow(X);
n = ncol(X);

# prepare offset vectors and one-hot encoded X
maxs = colMaxs(X);
if($matrixInput) {
  rix = matrix(seq(1,m)%*%matrix(1,1,n), m, n);
  cix = matrix(X + (t(cumsum(t(maxs))) - maxs), m, n);
}
else {
  rix = matrix(seq(1,m)%*%matrix(1,1,n), m*n, 1);
  cix = matrix(X + (t(cumsum(t(maxs))) - maxs), m*n, 1);
}

W = rix + cix;

if($revIn)
  if($weighted)
    X2 = table(cix, rix, W);
  else
    X2 = table(cix, rix);
else
  if($weighted)
      X2 = table(rix, cix, W);
    else
      X2 = table(rix, cix);

while(FALSE) { }
X2 = X2 * (seq(1, nrow(X2)) / nrow(X2));
while(FALSE) { }
Z = as.matrix(sum(X2));

write(Z, $out);
