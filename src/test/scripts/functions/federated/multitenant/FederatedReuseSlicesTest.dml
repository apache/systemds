#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

rowPart = $rP;
modFedMap = $mod_fedMap;

if(modFedMap) { # change order of federated partitions
  addr=list($in_X2, $in_X3, $in_X4, $in_X1);
} else {
  addr=list($in_X1, $in_X2, $in_X3, $in_X4);
}
if (rowPart) {
  X = federated(addresses=addr,
        ranges=list(list(0, 0), list($rows/4, $cols), list($rows/4, 0), list(2*$rows/4, $cols),
          list(2*$rows/4, 0), list(3*$rows/4, $cols), list(3*$rows/4, 0), list($rows, $cols)));
} else {
  X = federated(addresses=addr,
        ranges=list(list(0, 0), list($rows, $cols/4), list(0,$cols/4), list($rows, $cols/2),
          list(0,$cols/2), list($rows, 3*($cols/4)), list(0, 3*($cols/4)), list($rows, $cols)));
}

testnum = $testnum;

while(FALSE) { }

if(testnum == 0) { # EW_MULT
  Y = rand(rows=$rows, cols=$cols, seed=1234);

  S = X * Y;
  while(FALSE) { }
}
else if(testnum == 1) { # RM_EMPTY
  if(rowPart) {
    margin="rows";
    Y = matrix(0, nrow(X), 1);
    Y[floor(nrow(X) / 2) + 1 : nrow(X), 1] = matrix(1, floor(nrow(X) / 2), 1);
  } else {
    margin="cols";
    Y = matrix(0, ncol(X), 1);
    Y[floor(ncol(X) / 2) + 1 : ncol(X), 1] = matrix(1, floor(ncol(X) / 2), 1);
  }
  while(FALSE) { }
  Y = Y - 1;
  while(FALSE) { }
  Y = Y + 1;
  while(FALSE) { }

  Z = removeEmpty(target=X, margin=margin, select=Y);
  while(FALSE) { }
  S = as.matrix(sum(Z));
}
else if(testnum == 2) { # PARFOR_DIV
  Y = rand(rows=$rows, cols=$cols, seed=1234);

  numiter = 3;
  Z = matrix(0, rows=numiter, cols=1);
  parfor(i in 1:numiter) {
    Y_tmp = Y + i;
    while(FALSE) { }
    Z_tmp = X / Y_tmp;
    while(FALSE) { }
    Z[i, 1] = sum(Z_tmp);
  }
  S = as.matrix(sum(Z));
}

write(S, $out_S);
